;  MyPicoDos 4.01 - main menu and loader routine
;
;  Copyright (C) 1992-2004 Matthias Reichl <hias@horus.com>
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

	.include "common.inc"
	.include "cio.inc"

	.IF .NOT .DEF DEFDRIVE
	DEFDRIVE=1
	.ENDIF

	PICOSTART = $1000

	.OPT NO OBJ

	.include "rreadcode.src"
	.include "comloadcode.src"
	.include "basloadcode.src"
	.IF .DEF HIGHSPEED
	SIOADR = COMLEND
	.include "highspeedcode.src"
	.ENDIF

	.OPT OBJ

; sector number of root directory
ORIGDIR	= $169

; start of data area

BASE	= $3000

FFLAG	= BASE
STSECLO	= BASE+$80
STSECHI	= BASE+$100

SECBUF	= BASE+$200
STACK	= BASE+$300

DIRBUF	= BASE+$400 ; - $C00 / $800 bytes

; format of dirbuf:
; byte  0     ; 1 = regular file, 0 = dir
; bytes 1..11 : filenameext
; bytes 12-13 : start sector low / high

SCREEN	= BASE+$1000

NAMEBUF  = BASE+$2000

NAMEBUFE = BASE+$3400

CLREND	= BASE+$3500

; line separator for PICONAME.TXT
LINESEP	= 155

STACKPTR	= $E0

SADR	= $E2 ; ,$E3
TEMPV	= $E4 ; ,E5
NAMV	= $E6 ; ,E7

TEMP	= $E8


	.MACRO PUSH
	LDX STACKPTR
	STA STACK,X
	INC STACKPTR
	.ENDM

	.MACRO POP
	DEC STACKPTR
	LDX STACKPTR
	LDA STACK,X
	.ENDM

	.IF .DEF MYPDOSATR

	* = PICOSTART-16

;************************************
; ATR file header

	.WORD $0296 ; magic
	.WORD (PICOEND-PICOSTART+15)/16
	.WORD 128
	.WORD 0,0,0,0,0

	.ENDIF

	* = PICOSTART

	.IF .DEF MYPDOSBIN

;************************************
; boot header complete file

	.BYTE 0
	.BYTE (PICOEND-PICOSTART+127)/128
	.WORD PICOSTART
	.WORD XRTS

	.ELSE

;************************************
; boot header 2-stage boot

	.BYTE 0	; Boot-Block Header
	.BYTE 3	; 3 Sektoren	
	.WORD PICOSTART
	.WORD XRTS ; Dummy=RTS

	JMP REST

RESTSEC	.WORD 4
RESTBYT	.BYTE 125
RESTMSK	.BYTE 3
RESTLEN	.WORD 128

REST	LDA #1
	STA $301
	LDA #$31
	STA $300
	
	LDA #$52
	STA $302
	LDA #7
	STA $306

	LDA #<(PICOSTART+384)
	STA DBUF
	LDA #>(PICOSTART+384)
	STA DBUF+1

	LDA RESTLEN
	STA $308
	LDA RESTLEN+1
	STA $309

; read sector 4 so that the XF551 recognizes the disk density

	LDA #4
	STA DSEC
	LDA #0
	STA DSEC+1
	LDA #$40
	STA $303
	JSR $E459

	LDA RESTSEC
	STA DSEC
	LDA RESTSEC+1
	STA DSEC+1

LDREST	LDA #$40
	STA $303
	JSR $E459
	BMI LDREST
	LDA DBUF
	STA ADR
	LDA DBUF+1
	STA ADR+1
	LDY RESTBYT
	INY
	INY
	CLC
	LDA DBUF
	ADC (ADR),Y
	STA DBUF
	BCC NLR1
	INC DBUF+1
NLR1	DEY
	LDA (ADR),Y
	STA DSEC
	DEY
	LDA (ADR),Y
	AND RESTMSK
	STA DSEC+1
	ORA DSEC
	BNE LDREST

	.ENDIF
	JMP MENU
XRTS	RTS

;************************************

RREADB	.incbin "rread.bin"
RREADL	= * - RREADB

BASLOAD	.incbin "basload.bin"
BASLEN	= * - BASLOAD

COMLOAD	.incbin "comload.bin"
COMLEN	= * - COMLOAD

	.IF .DEF HIGHSPEED
USSIO	.incbin "highspeed.bin"
USLEN	= * - USSIO
	.ENDIF

; MyPicoDos display list

; number of screen lines
LINES	= 12

; MyPicoDos screen

TITLE	= *
	.IF .DEF HIGHSPEED
	.SBYTE "MyPicoDos 4.01HS (c)"
	.SBYTE " HiassofT 1992-2004 "
	.ELSE
	.SBYTE " MyPicoDos 4.01 (c) "
	.SBYTE "HiassofT 1992-2004  "
	.ENDIF

	.SBYTE "                 "
	.BYTE 66
	.SBYTE +$80,"D"
DSKSTAT	.SBYTE +$80,"1:"
	.BYTE 86
	.SBYTE "                  "

DSKNAM	.DC 40 0

TLINE	.BYTE "RRRRRRRRRRRRRRRRRRRR"
	.BYTE "RRRRRRRRRRRRRRRRRRRR"

;	        12345678901234567890
TSELECT	.SBYTE "    "
	.SBYTE "use"
	.BYTE 66,222,86
	.BYTE 66,223,86
	.BYTE 66,220,86
	.BYTE 66,221,86
	.BYTE 66
	.SBYTE +$80,"RETURN"
	.BYTE 86
	.SBYTE "to select"
	.SBYTE "    "
	

	.BYTE 66
	.SBYTE +$80,"ESC"
	.BYTE 86
	.SBYTE " = parent DIR"
	.SBYTE "  "
	.BYTE 66
	.SBYTE +$80,"1"
	.BYTE 86
	.SBYTE "-"
	.BYTE 66
	.SBYTE +$80,"8"
	.BYTE 86
	.SBYTE " = D1: - D8: "

	.SBYTE "  "
	.BYTE 66
	.SBYTE +$80,"F"
	.BYTE 86
	.SBYTE " = disk format :"

FORLEN	= 17

DFORMAT	.DC FORLEN 0
	.SBYTE "  "

	.SBYTE "        "
	.BYTE 66
	.SBYTE +$80,"L"
	.BYTE 86
	.SBYTE " = long names :"
LNSTAT	.BYTE 66
	.SBYTE +$80,"AUTO"
	.BYTE 86
	.SBYTE "        "

	.IF .DEF HIGHSPEED

	.SBYTE "      "
	.BYTE 66
	.SBYTE +$80,"H"
	.BYTE 86
	.SBYTE " = high speed"
	.SBYTE " SIO :"
SIOSTAT	.BYTE 66
	.SBYTE +$80,"AUTO"
	.BYTE 86
	.SBYTE "      "

	.ENDIF

FORASD	.BYTE 66
	.SBYTE +$80,"AUTO"
	.BYTE 86
	.SBYTE "(SD/DOS2.x)"

FORASM	.BYTE 66
	.SBYTE +$80,"AUTO"
	.BYTE 86
	.SBYTE "(SD/MyDOS) "

FORADD	.BYTE 66
	.SBYTE +$80,"AUTO"
	.BYTE 86
	.SBYTE "(DD/DOS2.x)"

FORADM	.BYTE 66
	.SBYTE +$80,"AUTO"
	.BYTE 86
	.SBYTE "(DD/MyDOS) "

FORSD	.BYTE 66
	.SBYTE +$80,"SD/DOS2.x"
	.BYTE 86
	.SBYTE "      "

FORSM	.BYTE 66
	.SBYTE +$80,"SD/MyDOS"
	.BYTE 86
	.SBYTE "       "

FORDD	.BYTE 66
	.SBYTE +$80,"DD/DOS2.x"
	.BYTE 86
	.SBYTE "      "

FORDM	.BYTE 66
	.SBYTE +$80,"DD/MyDOS"
	.BYTE 86
	.SBYTE "       "

TAUTO	.BYTE 66
	.SBYTE +$80,"AUTO"
	.BYTE 86

TOFF	.BYTE 66
	.SBYTE +$80,"OFF"
	.BYTE 86,0

DLIST	.BYTE 112,112
	.IF .DEF HIGHSPEED
	.BYTE 48
	.ELSE
	.BYTE 112
	.ENDIF
	.BYTE $42
	.WORD TITLE
	.BYTE 112,48,2,32,2,$42
	.WORD TLINE
	.BYTE $42
SLMS	.WORD SCREEN
	.DC (LINES-1) 2
	.BYTE $42
	.WORD TLINE
	.BYTE 32,$42
	.WORD TSELECT
	.BYTE 0,2,0,2,0,2

	.IF .DEF HIGHSPEED
	.BYTE 0,2
	.ENDIF

	.BYTE $41
	.WORD DLIST


; start of main selection code

MENU 	= *

	LDA #1
	STA 580
	STA 9
	LDA #$77
	STA 10
	LDA #$E4
	STA 11

	COP768 $0800, RREADB, RREADL

	.IF .DEF HIGHSPEED
	COP768 SIOADR, USSIO, USLEN
	LDA #<SIOADR
	STA NE459+1
	LDA #>SIOADR
	STA NE459+2
	.ENDIF

	LDA 560
	STA OLD560
	LDA 561
	STA OLD560+1
	LDA 710
	STA OLD710

	.IF .DEF HIGHSPEED
	JSR HISTAT
	.ENDIF
	STW 560,DLIST
	LDA #DEFDRIVE
	STA DRIVENO
	STA $301

NEWDISK	STW DIRSEC,ORIGDIR
	LDA #0
	STA 710
	STA STACKPTR
	JSR CLS
	LDA DRIVENO
	CLC
	ADC #$90
	STA DSKSTAT

	LDX DSKFOR
	BEQ FMTAUTO

	JSR SETFMT
	JMP GOTFMT

FMTAUTO	JSR GETDENS

	LDA SECBYTE
	STA DSKBYT
	LDA SECMASK
	STA DSKMSK
	LDA $308
	STA DSKLEN
	LDA $309
	STA DSKLEN+1

GOTFMT	JSR PRTFOR

LOOP	JSR READDIR

CHOICE	JSR SELECT
	BCS LOOP

	LDA FFLAG,X
	BEQ SUBDIR
	LDY SECBYTE
	LDA STSECHI,X
	STA BUF,Y
	LDA STSECLO,X
	INY
	STA BUF,Y
	LDA OLD560
	STA 560
	STA $D402
	LDA OLD560+1
	STA 561
	STA $D403
	LDA OLD710
	STA 710
	STA $D018

	JMP LOAD

SUBDIR	STX TEMP
	LDA DIRSEC
	PUSH
	LDA DIRSEC+1
	PUSH
	LDX TEMP
	LDA STSECLO,X
	STA DIRSEC
	LDA STSECHI,X
	STA DIRSEC+1
	JMP LOOP

SELECT	LDA MAXY
	CMP #$FF
	BNE FILESOK
	RTS

FILESOK	LDA #0
	STA XPOS
	STA YPOS

	LDA LONGFLG
	BEQ SELLP
	JMP SELLNG

; "short directory" selection

SELLP	JSR INVERS
GKLP1	JSR GETKEY
	TAX
	TYA
	BMI GKLP1
	TXA
	PHA
	JSR INVERS
	PLA
	CMP #'+
	BNE NCLEFT
YCLEFT	JMP CLEFT
NCLEFT	CMP #30
	BEQ YCLEFT
	CMP #'*
	BNE NCRIGHT
YCRIGHT	JMP CRIGHT
NCRIGHT	CMP #31
	BEQ YCRIGHT
	CMP #'-
	BNE NCUP
YCUP	JSR CUP
	JMP SELLP
NCUP	CMP #28
	BEQ YCUP
	CMP #'=
	BNE NCDOWN
YCDOWN	JMP CDOWN
NCDOWN	CMP #29
	BEQ YCDOWN
	CMP #155
	BNE NCR
	LDA FILES
	BEQ NCR
	JMP RETURN
NCR	CMP #27
	BNE NESC
	LDA STACKPTR
	BEQ SELLP
	POP
	STA DIRSEC+1
	POP
	STA DIRSEC
	SEC
	RTS
NESC	= *
	.IF .DEF HIGHSPEED
	CMP #'H
	BNE NKEYH
	JSR KEYH
	JMP SELLP
NKEYH	= *
	.ENDIF
	CMP #'1
	BCC NKEY18
	CMP #'9
	BCS NKEY18
	JSR KEY18
	JMP SELLP
NKEY18	CMP #'F
	BNE NKEYF
	JSR KEYF
NKEYF	CMP #'L
	BNE NKEYL
	JSR KEYL
	SEC
	RTS
NKEYL	JMP SELLP

; "long names" selection

SELLNG	JSR INVERS2
GKLP2	JSR GETKEY
	TAX
	TYA
	BMI GKLP2
	TXA
	PHA
	JSR INVERS2
	PLA
	CMP #'+
	BNE NCLEFT2
YCLELF2	JMP CLEFT2
NCLEFT2	CMP #30
	BEQ YCLELF2
	CMP #'*
	BNE NCRIGH2
YCRIGH2	JMP CRIGHT2
NCRIGH2	CMP #31
	BEQ YCRIGH2
	CMP #'-
	BNE NCUP2
YCUP2	JSR CUP
	JMP SELLNG
NCUP2	CMP #28
	BEQ YCUP2
	CMP #'=
	BNE NCDOWN2
YCDOWN2	JMP CDOWN2
NCDOWN2	CMP #29
	BEQ YCDOWN2
	CMP #155
	BNE NCR2
	LDA FILES
	BEQ NCR2
	JMP RETURN2
NCR2	CMP #27
	BNE NESC2
	LDA STACKPTR
	BEQ SELLNG
	POP
	STA DIRSEC+1
	POP
	STA DIRSEC
	SEC
	RTS
NESC2	= *
	.IF .DEF HIGHSPEED
	CMP #'H
	BNE NKEYH2
	JSR KEYH
	JMP SELLNG
NKEYH2	= *
	.ENDIF
	CMP #'1
	BCC NKEY182
	CMP #'9
	BCS NKEY182
	JSR KEY18
	JMP SELLNG
NKEY182	CMP #'F
	BNE NKEYF2
	JSR KEYF
NKEYF2	CMP #'L
	BNE NKEYL2
	JSR KEYL
	SEC
	RTS
NKEYL2	JMP SELLNG

CLEFT	DEC XPOS
	BPL CLOK
	LDA #2
	STA XPOS
	DEC YPOS
	BPL CLOK
	LDA #0
	STA XPOS
	STA YPOS
CLOK	JMP SELLP


CRIGHT	LDA YPOS
	CMP MAXY
	BEQ CRMY

	INC XPOS
	LDA XPOS
	CMP #3
	BNE CROK
	LDA #0
	STA XPOS
	INC YPOS
	JMP CROK	

CRMY	LDA XPOS
	CMP MAXX
	BEQ CROK
	INC XPOS

CROK	JMP SELLP

CUP	LDA YPOS
	BEQ CUOK
	DEC YPOS
CUOK	RTS

CDOWN	LDA YPOS
	CMP MAXY
	BEQ CDOK

	INC YPOS
	LDA YPOS
	CMP MAXY
	BNE CDOK

	LDA XPOS
	CMP MAXX
	BCC CDOK
	BEQ CDOK

	LDX MAXY
	DEX
	STX YPOS
CDOK	JMP SELLP

CDOWN2	LDA FILES
	BEQ CDOK2
	CLC
	LDA YPOS
	ADC #1
	CMP FILES
	BEQ CDOK2
	STA YPOS
CDOK2	JMP SELLNG

CLEFT2	LDA YPOS
	CMP #LINES-1
	BCC GOSTRT
	SBC #LINES-1
	STA YPOS
	JMP SELLNG
GOSTRT	LDA #0
	STA YPOS
	JMP SELLNG

CRIGHT2	LDA FILES
	BEQ CR2END
	CLC
	LDA YPOS
	ADC #LINES-1
	CMP FILES
	BCC NOTEND
	LDA FILES
	SBC #1
NOTEND	STA YPOS
CR2END	JMP SELLNG

RETURN	JSR INVERS
	LDA YPOS
	ASL
	CLC
	ADC YPOS
	CLC
	ADC XPOS
	TAX
	CLC
	RTS

RETURN2	JSR INVERS2
	LDX YPOS
	CLC
	RTS

KEY18	SEC
	SBC #'0
	STA DRIVENO
	STA $301
	PLA
	PLA
	PLA
	PLA
	JMP NEWDISK

	.IF .DEF HIGHSPEED
KEYH	LDA NE459+2
	CMP #$E4
	BEQ HION

	LDA #$59
	STA NE459+1
	LDA #$E4
	STA NE459+2
	JMP ENDHI

HION	LDA #<SIOADR
	STA NE459+1
	LDA #>SIOADR
	STA NE459+2
	LDA #0
	STA $301
	JSR NE459
	LDA DRIVENO
	STA $301

ENDHI	JSR HISTAT
	RTS
	.ENDIF

KEYF	INC DSKFOR
	LDA DSKFOR
	CMP #5
	BNE NDFOR0
	LDA #0
	STA DSKFOR
	LDA DSKMSK
	STA SECMASK
	LDA DSKBYT
	STA SECBYTE
	LDA DSKLEN
	STA $308
	LDA DSKLEN+1
	STA $309
	JMP ENDKEYF
NDFOR0	TAX
	JSR SETFMT

ENDKEYF	JSR PRTFOR
	RTS

KEYL	LDA USELONG
	EOR #1
	STA USELONG
	JSR LNGSTAT
	RTS

	.IF .DEF HIGHSPEED
HISTAT	LDX #5
	LDA NE459+2
	CMP #$E4
	BEQ HIOFF

HALP	LDA TAUTO,X
	STA SIOSTAT,X
	DEX
	BPL HALP
	RTS
HIOFF	LDA TOFF,X
	STA SIOSTAT,X
	DEX
	BPL HIOFF
	RTS
	.ENDIF

LNGSTAT	LDX #5
	LDA USELONG
	BEQ NOULNG
LALP	LDA TAUTO,X
	STA LNSTAT,X
	DEX
	BPL LALP
	RTS
NOULNG	LDA TOFF,X
	STA LNSTAT,X
	DEX
	BPL NOULNG
	RTS

INVERS	JSR SETADR
	LDY #12
ILP	LDA (SADR),Y
	EOR #$80
	STA (SADR),Y
	DEY
	BPL ILP
	JSR CHKCURS	
	RTS

INVERS2	JSR SETADR2
	LDY #39
ILP2	LDA (SADR),Y
	EOR #$80
	STA (SADR),Y
	DEY
	BPL ILP2
	JSR CHKCURS
	RTS

SETADR2	LDA YPOS
	STA SADR
	LDA #0
	STA SADR+1
	ASL SADR
	ROL SADR+1
	ASL SADR
	ROL SADR+1
	ASL SADR
	ROL SADR+1
	LDA SADR
	STA TEMPV
	LDA SADR+1
	STA TEMPV+1
	ASL TEMPV
	ROL TEMPV+1
	ASL TEMPV
	ROL TEMPV+1
	CLC
	LDA SADR
	ADC TEMPV
	STA SADR
	LDA SADR+1
	ADC TEMPV+1
	ADC #>SCREEN
	STA SADR+1
	RTS

SETADR	JSR SETADR2
	LDX XPOS
	CLC
	LDA XTAB,X
	ADC SADR
	STA SADR
	BCC NSETA1
	INC SADR+1
NSETA1	RTS

CHKCURS	LDA YPOS
	CMP SCRY
	BCC CLOW
	CLC
	LDA SCRY
	ADC #LINES-1
	CMP YPOS
	BCC CHIGH
	RTS	

CLOW	LDA YPOS
	STA SCRY
	JSR SETSCR
	RTS

CHIGH	SEC
	LDA YPOS
	SBC #LINES-1
	STA SCRY
	JSR SETSCR
	RTS

SETSCR	LDA SCRY
	STA SLMS
	LDA #0
	STA SLMS+1
	ASL SLMS
	ROL SLMS+1
	ASL SLMS
	ROL SLMS+1
	ASL SLMS
	ROL SLMS+1
	LDA SLMS
	STA TEMPV
	LDA SLMS+1
	STA TEMPV+1
	ASL TEMPV
	ROL TEMPV+1
	ASL TEMPV
	ROL TEMPV+1
	CLC
	LDA SLMS
	ADC TEMPV
	STA SLMS
	LDA SLMS+1
	ADC TEMPV+1
	STA SLMS+1
	CLC
	LDA SLMS+1
	ADC #>SCREEN
	STA SLMS+1
	RTS

READSEC LDA #$52
	STA $302
	LDA #$40
	STA $303
	LDA #7
	STA $306
	JMP NE459

READDIR	LDA DIRSEC
	STA DSEC
	LDA DIRSEC+1
	STA DSEC+1
	JSR CLS

	LDA #0
	STA LONGFLG
	STA DIRFILES
	STA NAMESEC
	STA NAMESEC+1
	STA FILES
	STA MAXX
	STA MAXY

	STW DBUF,SECBUF
	STW TEMPV,DIRBUF

	LDA #8
	STA REMAIN
	LDA #$80
	STA MAXFILE

RDDIRLP	JSR READSEC
	BMI DIRERR

	LDA REMAIN
	CMP #8
	BNE NOBIG
	LDA $309
	BEQ NOBIG
	LDA SECBUF+128
	BEQ NOBIG
	LDA #0
	STA MAXFILE

NOBIG	LDX #0
RDFILLP	LDA SECBUF,X
	CMP #0
	BEQ ENDRDIR

	CMP #$10
	BEQ FDIR1
	CMP #$30
	BNE NFNDDIR

FDIR1	JSR FNDDIR
	JMP NOFND

DIRERR	JSR CLS
	LDA #0
	STA FILES
	STA MAXX
	STA MAXY
	LDX #DERRLEN-1
DERRLP	LDA DSKERR,X
	STA SCREEN+2,X
	DEX
	BPL DERRLP
	RTS

NFNDDIR AND #$C3
	CMP #$42
	BEQ FNDFIL
	CMP #$03
	BNE NOFND

FNDFIL	JSR FNDFILE

NOFND	TXA
	CLC
	ADC #$10
	TAX
	CMP MAXFILE
	BNE RDFILLP

	DEC REMAIN
	BEQ ENDRDIR

	INC DSEC
	BNE RDDIRLP
	INC DSEC+1
	JMP RDDIRLP

ENDRDIR	LDA USELONG
	BEQ NONAMES
	LDA NAMESEC
	ORA NAMESEC+1
	BEQ NONAMES

	JSR RDNAMES
	BMI NONAMES
	JSR DISPNAM
	BMI NONAMES
	LDA FILES
	BEQ EMPTYD
	STA MAXY
	LDA #1
	STA LONGFLG
	RTS

NONAMES LDA DIRFILES
	BNE DOSHT

EMPTYD	LDA #0
	STA FILES
	STA MAXX
	STA MAXY

	LDX #DEMPTLEN-1
DEMPTLP	LDA DSKEMPT,X
	STA SCREEN+2,X
	DEX
	BPL DEMPTLP
	RTS

DOSHT	JSR DISPSHT
	JSR CORRECT
	RTS

CHKNAME	STX TEMP
	LDY #0
PSYSC	LDA SECBUF+5,X
	CMP PICOSYS,Y
	BNE NOPSYS
	INX
	INY
	CPY #11
	BNE PSYSC
	LDX TEMP
	SEC
	RTS

NOPSYS	LDX TEMP
	LDY #0
PNAMC	LDA SECBUF+5,X
	CMP PICONAM,Y
	BNE NOPNAM
	INX
	INY
	CPY #11
	BNE PNAMC
	LDX TEMP
	LDA SECBUF+3,X
	STA NAMESEC
	LDA SECBUF+4,X
	STA NAMESEC+1
	SEC
	RTS

NOPNAM	LDX TEMP
	CLC
	RTS

FNDDIR	LDY #0
	JMP FNDENT

FNDFILE	LDY #1

FNDENT	TYA
	PHA
	JSR CHKNAME
	BCC NFILOK
	PLA
	RTS
NFILOK	STX TEMP

	LDY #0
	PLA
	STA (TEMPV),Y
	INY
NAMCPLP	LDA SECBUF+5,X
	STA (TEMPV),Y
	INX
	INY
	CPY #12
	BNE NAMCPLP

	LDX TEMP
	LDA SECBUF+3,X
	STA (TEMPV),Y
	INY
	LDA SECBUF+4,X
	STA (TEMPV),Y

	CLC
	LDA TEMPV
	ADC #16
	STA TEMPV
	BCC NTINC1
	INC TEMPV+1
NTINC1	INC DIRFILES
	RTS

; display directory in short format

EMPTY1	RTS

DISPSHT	STW TEMPV,DIRBUF
	STW SADR1,SCREEN
	LDA #0
	STA FILES
	LDA DIRFILES
	BEQ EMPTY1

DISPLP1	LDY #0
	LDX FILES
	LDA (TEMPV),Y
	STA FFLAG,X
	LDY #12
	LDA (TEMPV),Y
	STA STSECLO,X
	INY
	LDA (TEMPV),Y
	STA STSECHI,X

	LDX MAXX
	CLC
	LDA XTAB,X
	ADC SADR1
	STA SADR
	LDA SADR1+1
	ADC #0
	STA SADR+1

	LDY #0
	LDA (TEMPV),Y
	BNE REGFILE
	LDA #30
	STA (SADR),Y
REGFILE	INY

DISPLP2	LDA (TEMPV),Y
	JSR INTERNAL
	STA (SADR),Y
	INY
	CPY #12
	BNE DISPLP2

	CLC
	LDA TEMPV
	ADC #16
	STA TEMPV
	BCC NTV1
	INC TEMPV+1

NTV1	INC FILES
	INC MAXX
	LDA MAXX
	CMP #3
	BNE NIMY1
	INC MAXY
	LDA #0
	STA MAXX
	CLC
	LDA SADR1
	ADC #40
	STA SADR1
	BCC NIMY1
	INC SADR1+1

NIMY1	LDA FILES
	CMP DIRFILES
	BEQ SHTEND
	JMP DISPLP1
SHTEND	LDX TEMP
	RTS

CORRECT	DEC MAXX
	BPL ENDCOR
	LDA #2
	STA MAXX
	DEC MAXY
ENDCOR	RTS

RDNAMES	LDA NAMESEC
	STA DSEC
	LDA NAMESEC+1
	STA DSEC+1
	LDA #<NAMEBUF
	STA DBUF
	STA TEMPV
	LDA #>NAMEBUF
	STA DBUF+1
	STA TEMPV+1

RDNAMLP	LDA #$40
	STA $303
	JSR NE459
	BMI NAMERR

	LDY SECBYTE
	LDA (TEMPV),Y
	AND SECMASK
	STA DSEC+1
	INY
	LDA (TEMPV),Y
	STA DSEC
	INY
	CLC
	LDA DBUF
	ADC (TEMPV),Y
	STA DBUF
	STA TEMPV
	LDA DBUF+1
	ADC #0
	STA DBUF+1
	STA TEMPV+1

	LDA DSEC
	ORA DSEC+1
	BEQ RDNEND

	LDA DBUF+1
	CMP #>(NAMEBUFE)
	BNE RDNAMLP

RDNEND	LDA TEMPV
	STA NAMEEND
	LDA TEMPV+1
	STA NAMEEND+1

; sentinel
	LDA #155
	STA NAMEBUF-1

; check for line separator at end of PICONAME.TXT
	LDA TEMPV
	BNE RDN1
	DEC TEMPV+1
RDN1	DEC TEMPV
	LDY #0
	LDA (TEMPV),Y
	CMP #LINESEP
	BEQ LSEPOK
	INY
	LDA #LINESEP
	STA (TEMPV),Y
	INC NAMEEND
	BNE LSEPOK
	INC NAMEEND+1
LSEPOK	LDA #0
NAMERR	RTS

	.include "longname.src"

; find FILNAM in DIRBUF
; if found, set FFLAG, STSECLO, STSECHI
; but do not increment FILES

FINDFIL	STW TEMPV,DIRBUF
	LDA #0
	STA DIRCNT
FINDLP	LDA DIRCNT
	CMP DIRFILES
	BEQ NOFFND
	LDY #1
FCMPLP	LDA (TEMPV),Y
	CMP FILNAM-1,Y
	BNE NEXTFIL
	INY
	CPY #12
	BNE FCMPLP
	LDX FILES
	LDA (TEMPV),Y
	STA STSECLO,X
	INY
	LDA (TEMPV),Y
	STA STSECHI,X
	LDY #0
	LDA (TEMPV),Y
	STA FFLAG,X
	LDA #0
	RTS

NEXTFIL	CLC
	LDA TEMPV
	ADC #16
	STA TEMPV
	BCC NTV2
	INC TEMPV+1
NTV2	INC DIRCNT
	JMP FINDLP

NOFFND	LDY #1
	RTS

DISPNAM	STW NAMV,NAMEBUF
	STW SADR,SCREEN
	JSR GETLNG
	BMI DISPERR
	CPX #0
	BEQ NOTITLE

	STX TEMP
	SEC
	LDA #40
	SBC TEMP
	LSR
	TAX
	LDY #0
DNAMLP	LDA LONGNAM,Y
	JSR INTERNAL
	STA DSKNAM,X
	INY
	INX
	DEC TEMP
	BNE DNAMLP

NOTITLE	= *

DISLP1	JSR GETFNAM
	BMI DISPEND
	JSR GETLNG
	BMI DISPERR
	CPX #0
	BEQ DISLP1
	JSR FINDFIL
	BNE DISLP1
	LDY #38
DISLP2	LDA LONGNAM-1,Y
	JSR INTERNAL
	STA (SADR),Y
	DEY
	BNE DISLP2
	CLC
	LDA SADR
	ADC #40
	STA SADR
	BCC NSA1
	INC SADR+1
NSA1	INC FILES
	LDA FILES
	CMP #100
	BCC DISLP1
DISPEND	LDY #0
	RTS
DISPERR	LDY #$FF
	RTS

CLS	LDA #0
	TAY
CLSLP	STA SCREEN,Y
	STA SCREEN+$100,Y
	STA SCREEN+$200,Y
	STA SCREEN+$300,Y
	STA SCREEN+$400,Y
	STA SCREEN+$500,Y
	STA SCREEN+$600,Y
	STA SCREEN+$700,Y
	DEY
	BNE CLSLP
	STA SCRY
	JSR SETSCR
	LDY #39
	LDA #0
CLSLP2	STA DSKNAM,Y
	DEY
	BPL CLSLP2
	RTS

GETKEY	LDA $E425
	PHA
	LDA $E424
	PHA
	RTS

PRTFOR	LDA #0
	STA PRTFSEL
	LDA SECMASK
	CMP #$FF
	BNE PNOMY
	INC PRTFSEL
PNOMY	LDA SECBYTE
	CMP #253
	BNE PNODD
	LDA PRTFSEL
	ORA #2
	STA PRTFSEL
PNODD	LDA DSKFOR
	BEQ PFAUTO
	LDA PRTFSEL
	ORA #4
	STA PRTFSEL
PFAUTO	LDA PRTFSEL
	ASL
	TAX
	LDA PFTAB,X
	STA PRTFLP+1
	LDA PFTAB+1,X
	STA PRTFLP+2
	
	LDX #FORLEN-1
PRTFLP	LDA $1234,X
	STA DFORMAT,X
	DEX
	BPL PRTFLP
	RTS

CLRMEM2	LDA #0
	TAY
MEMCLR	STA (0),Y
	DEY
	BNE MEMCLR
	INC 1
	LDX 1
	CPX #>CLREND
	BNE MEMCLR
	RTS

CLRLEN	= *-CLRMEM2

GR0	CLOSE 0
	OPEN 0,12,0,EDITOR
	LDA 20
	CLC
	ADC #2
WVBI	CMP 20
	BNE WVBI
	RTS

EDITOR	.BYTE "E:", 155

BASON	LDA $D20F
	AND #8
	BEQ EBASON

	LDA #0
	STA $BFFD
	LDA $BFFD
	BNE EBASON

	LDA #$A0
	STA 106
	STA 740
	JSR GR0
	LDA #0
	STA 1016

	LDA $D301
	AND #$FD
	STA $D301

EBASON	RTS

CHKBAS	LDA #0
	STA $BFFD
	LDA $BFFD
	BEQ NOBAS
	RTS
NOBAS	BPUT 0, NOBASL, NOBAST
	JMP *

NOBAST	.BYTE 125, "No BASIC found!",253,155
NOBASL	= * - NOBAST

BASOFF	LDA $D20F
	AND #8
	BEQ EBASOFF
	LDA #0
	STA $BFFD
	LDA $BFFD
	BEQ EBASOFF
	LDA $D301
	ORA #2
	STA $D301
	LDA #0
	STA $BFFD
	LDA $BFFD
	BNE EBASOFF

; clear display list / screen and RAM under basic ROM

	LDA #$9C
	STA TEMPV+1
	LDA #0
	STA TEMPV
	TAY
	LDX #$24
CLLP	STA (TEMPV),Y
	INY
	BNE CLLP
	INC TEMPV+1
	DEX
	BNE CLLP

	LDA #$C0
	STA 106
	STA 740
	LDA #1
	STA 1016
	JSR GR0
EBASOFF	RTS

	.IF .DEF HIGHSPEED
CHKHI	LDX DRIVENO
;	LDA TURTAB-1,X
;	BNE SPDHI
	LDA SPEEDTB-1,X
	BEQ SPDLO
	CMP #$28
	BEQ SPDLO
SPDHI	RTS
SPDLO	LDA #$E4
	STA NE459+2
	LDA #$59
	STA NE459+1
	RTS
	.ENDIF

LOAD	LDX #CLRLEN-1
CCL	LDA CLRMEM2,X
	STA CLRMEM,X
	DEX
	BPL CCL

	LDA #<ENDX
	STA 738
	LDA #>ENDX
	STA 739

	LDA #<BUF
	STA DBUF
	LDA #>BUF
	STA DBUF+1
	TAX
	STA BYTES

	JSR GETBYT
	STA TEMPV
	JSR GETBYT
	STX XREG
	STA TEMPV+1
	AND TEMPV
	CMP #255
	BNE LOAD2

	JSR BASOFF
	COP768 COMLD, COMLOAD, COMLEN

	; update init address
	LDA #<ENDX
	STA 12
	LDA #>ENDX
	STA 13

	.IF .DEF HIGHSPEED
	JSR CHKHI
	LDA NE459+2
	CMP #$E4
	BEQ COMSIO1
	LDA #<SIOEND
	STA 0
	LDA #>SIOEND
	STA 1
	JMP LDCOM2
	.ENDIF

COMSIO1	LDA #<COMLEND
	STA 0
	LDA #>COMLEND
	STA 1

LDCOM2	LDA #0
	STA 580
	LDX XREG
	JMP COMLD

LOAD2	LDA TEMPV
	ORA TEMPV+1
	BNE BINOK

	JMP LOADBAS

BINOK	JSR BASOFF
	LDX XREG
	JSR GETBYT
	STA DBUF	; Start-Adr. LO
	JSR GETBYT
	STA DBUF+1	; Start-Adr. HI
	CLC
	LDA DBUF	; Start-Adr + 6 =
;		* Init-Adresse
	ADC #6
	STA BLEN
	LDA DBUF+1
	ADC #0
	STA BLEN+1

	JSR GETBYT
	STA 12	; Run-Adr. LO
	JSR GETBYT
	STA 13	; Run-Adr. HI

	LDA SECMASK
	STA BINMASK+1
	LDA SECBYTE
	STA BINBYTE+1

	.IF .DEF HIGHSPEED
	JSR CHKHI
	LDA NE459+2
	CMP #$E4
	BEQ BINSIO1
	STA BINSIO+2
	LDA NE459+1
	STA BINSIO+1
	LDA #<SIOEND
	STA 0
	LDA #>SIOEND
	STA 1
	JMP CPBIN1
	.ENDIF

BINSIO1	LDA #<LDBINLO
	STA 0
	LDA #>LDBINLO
	STA 1

	LDA NE459+1
	STA BINSIO+1
	LDA NE459+2
	STA BINSIO+2

; kopiere Laderoutine nach $80

CPBIN1	LDX #BINLEN
L2CLOP	LDA BINLOAD,X
	STA LDBINAD,X
	DEX
	BPL L2CLOP
	JMP LDBINAD

; das hier ist die Laderoutine:

BINLOAD	JSR CLRMEM
BINLOOP	LDA #$40
	STA $303
BINSIO	JSR $E459
	BMI BINLOOP

	LDA DBUF
	STA ADR
	LDA DBUF+1
	STA ADR+1

BINBYTE	LDY #253
	LDA (ADR),Y ; naechster
BINMASK	AND #$FF
	STA DSEC+1

	INY
	LDA (ADR),Y
	STA DSEC
	ORA DSEC+1
	BEQ BINEND

	INY
	CLC
	LDA DBUF
	ADC (ADR),Y
	STA DBUF
	BCC BINLOOP
	INC DBUF+1
	BNE BINLOOP

BINEND	; JSR JJ1
	.BYTE $20
	.WORD JJ1
	; JSR JJ2
	.BYTE $20
	.WORD JJ2
	JMP (10)

JJ1	= *-BINLOAD+LDBINAD
	JMP (BLEN)
JJ2	= *-BINLOAD+LDBINAD
	JMP (12)

BINLEN	= * - BINLOAD

LOADBAS	JSR BASON
	JSR CHKBAS
	COP768 BASLD, BASLOAD, BASLEN

	.IF .DEF HIGHSPEED
	JSR CHKHI
	LDA NE459+2
	CMP #$E4
	BEQ BASSIO1
	LDA #<SIOEND
	STA 0
	STA $80
	LDA #>SIOEND
	STA 1
	STA $81
	JMP LDBAS2
	.ENDIF

BASSIO1	LDA #<BASLEND
	STA 0
	STA $80
	LDA #>BASLEND
	STA 1
	STA $81

LDBAS2	LDA #0
	STA 580

; set tab width to 10 - otherwise some basic
; programs will just crash!

	LDA #10
	STA $C9

	LDA #<ENDX
	STA 738
	LDA #>ENDX
	STA 739

	LDX XREG

STORLP	JSR GETBYT
	STA ADR
	JSR GETBYT
	STA ADR+1
	CLC
	LDA ADR
	ADC $80
STORL	STA $82
	LDA ADR+1
	ADC $81
STORH	STA $83
	INC STORL+1
	INC STORL+1
	INC STORH+1
	INC STORH+1
	LDA STORL+1
	CMP #$8E
	BNE STORLP

	LDA $8C
	STA $8E
	STA $90
	STA $0E

	LDA $8D
	STA $8F
	STA $91
	STA $0F

	JMP BASLD

SETFMT	DEX
	LDA DBYTTAB,X
	STA SECBYTE
	LDA DMSKTAB,X
	STA SECMASK
	LDA DLENLO,X
	STA $308
	LDA DLENHI,X
	STA $309
	RTS

; convert atascii to screen code

INTERNAL	CMP #32
	BCC INTGRAF
	CMP #96
	BCC INTNORM
	CMP #128
	BCC INTNO
	CMP #160
	BCC INTGRAF
	CMP #224
	BCS INTNO

INTNORM	SEC
	SBC #32
	JMP INTNO

INTGRAF	CLC
	ADC #64
INTNO	RTS


FILES	.BYTE 0
MAXY	.BYTE 0
MAXX	.BYTE 0
XPOS	.BYTE 0
YPOS	.BYTE 0

SCRY	.BYTE 0
REMAIN	.BYTE 0
MAXFILE .BYTE 0

; current drive number
DRIVENO	.BYTE 0

; current start of directory
DIRSEC	.WORD 0

; remember old display list
OLD560	.WORD 0

; remember old background color
OLD710	.BYTE 0

DSKFOR	.BYTE 0
DSKMSK	.BYTE 0
DSKBYT	.BYTE 0
DSKLEN	.WORD 0

DBYTTAB	.BYTE 125,125,253,253
DMSKTAB	.BYTE $03,$FF,$03,$FF
DLENLO	.BYTE 128,128,0,0
DLENHI	.BYTE 0,0,1,1

; number of files in directory
DIRFILES .BYTE 0
; temporary counter used by FINDFIL
DIRCNT	.BYTE 0
; sector start of PICONAME.TXT
NAMESEC	.WORD 0

; use long names
USELONG	.BYTE 1

; got long names
LONGFLG	.BYTE 0

PICOSYS	.BYTE "PICODOS SYS"
PICONAM .BYTE "PICONAMETXT"

; temporary screen address
SADR1	.WORD 0

; end of long name buffer
NAMEEND	.WORD 0


DSKERR	.SBYTE "Disk Error!"
DERRLEN	= *-DSKERR

DSKEMPT	.SBYTE "Empty Dir! "
DEMPTLEN	= *-DSKEMPT

; filename from PICONAME.TXT
FILNAM	.DC 11 0
; long name from PICONAME.TXT in screen code
LONGNAM	.DC 40 0

	SIOVEC = NE459
	.include "getdens.src"

PRTFSEL	.BYTE 0

PFTAB	.WORD FORASD, FORASM, FORADD, FORADM
	.WORD FORSD, FORSM, FORDD, FORDM

XTAB	.BYTE 1,14,27

	.IF .DEF MYPDOSBIN

	.IF (*&127)<>0
	.DC (128-(*&127)) 0
	.ENDIF

	.ENDIF

PICOEND	= *
