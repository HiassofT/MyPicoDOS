;  MyPicoDos 3.0
;
;  Copyright (C) 1992-2003 Matthias Reichl <hias@horus.com>
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

	.IF .DEF MYPDOSATR
	DEFDRIVE=2
	.ELSE
	DEFDRIVE=1
	.ENDIF

PICOSTART	= $700
MYADR	= $6000

BUF	= PICOSTART
CLRMEM	= BUF

BASE	= $3000

SCREEN	= BASE

FFLAG	= BASE+$400
STSECLO	= BASE+$440
STSECHI	= BASE+$480

SECBUF	= BASE+$500
STACK	= BASE+$600


STACKPTR	= $E0

FILES	= $E2
MAXY	= $E3
MAXX	= $E4
XPOS	= $E5
YPOS	= $E6

TEMP	= $E7
SADR	= $E8


SCRY	= $EA
REMAIN	= $EB

TEMPV	= $EC ; ,ED

BYTES	= $43
ADD	= $44 ; ,45
EN	= $46 ; ,47

ORIGDIR	= $169

	.MACRO GET
	CPX BYTES
	BNE NRR
	JSR RREAD
NRR	LDA BUF,X
	INX
	.ENDM


	.MACRO INTERNAL
	CMP #32
	BCC GRAF
	CMP #96
	BCS NO
	SEC
	SBC #32
	JMP NO
GRAF	CLC
	ADC #64
	BNE NO
NO 
	.ENDM


	.MACRO PUSH
	LDX STACKPTR
	STA STACK,X
	INC STACKPTR
	.ENDM

	.MACRO POP
	DEC STACKPTR
	LDX STACKPTR
	LDA STACK,X
	.ENDM

	.MACRO STW ; ADR,WERT
	.IF %0 <> 2
	.ERROR "STW: need two parameters"
	.ELSE
	LDA #<(%2)
	STA %1
	LDA #>(%2)
	STA %1+1
	.ENDIF
	.ENDM


DBUF	= 772
DSEC	= 778
ADR	= $45	; Temporaerer Vektor

	.IF .DEF MYPDOSATR

	* = PICOSTART-16

;************************************
; ATR file header

	.WORD $0296 ; magic
	.WORD (PICOEND-PICOSTART+15)/16
	.WORD 128
	.WORD 0,0,0,0,0

;************************************
; boot header

	.BYTE 0
	.BYTE (PICOEND-PICOSTART+127)/128
	.WORD PICOSTART
	.WORD ENDX

	LDA #1
	STA 580
	STA 9
	JMP MENU

	.ELSE

;************************************
; com file header

	* = PICOSTART-6

	.WORD $FFFF
	.WORD MYADR
	.WORD MYADR+PICOEND-PICOSTART-1

;************************************
; boot header

	.BYTE 0	; Boot-Block Header
	.BYTE 3	; 3 Sektoren	
	.WORD PICOSTART
	.WORD ENDX ; Dummy=RTS

	JMP REST

RESTSEC	.WORD 4

REST	LDX #0
	STX $307	; (Unused)
	INX
	STX 580
	STX 9	; DiskBoot ok.
	STX $301 ; Drive=1
	LDA #$31
	STA $300	; Drive=1

	JSR SETDENS

	LDX #7
	STX $306 ; Timeout=7
	INX
	STX DBUF+1 ; LoadAdr hi=8
	LDA #'R
	STA $302 ; Cmd=Read
	LDA #128
	STA DBUF ; LoadAdr lo=$80
	LDA RESTSEC
	STA DSEC ; Sector=365
	LDA RESTSEC+1
	STA DSEC+1


LDREST	LDA #$40
	STA $303
	JSR NE459
	LDA DBUF
	STA ADR
	LDA DBUF+1
	STA ADR+1
	LDY SECBYTE
	INY
	INY
	CLC
	LDA DBUF
	ADC (ADR),Y
	STA DBUF
	BCC NLR1
	INC DBUF+1
NLR1	DEY
	LDA (ADR),Y
	STA DSEC
	DEY
	LDA (ADR),Y
	AND SECMASK
	STA DSEC+1
	ORA DSEC
	BNE LDREST
	JMP MENU

	.ENDIF

; setze Maske fuer Sectornummer und Anzahl der
; setze Maske fuer Sectornummer und Anzahl der
; Bytes pro Sektor anhand des Ergebnisses des
; "get percom" Kommandos. Schlaegt das Kommando
; fehl, wird single density und DOS 2.5 Format
; angenommen (Filenummer muss ausmaskiert werden)
; $308/309 werden auf die jeweilige Sektor-länge
; initialisiert

SETDENS	LDA #<PERCOM
	STA DBUF
	LDA #>PERCOM
	STA DBUF+1
	LDA #12
	STA $308
	LDA #$4E
	STA $302
	LDA #0
	STA SECBYTE
	STA SECMASK
	STA $309
	LDA #7
	STA $306
	LDA #$40
	STA $303
	JSR $E459
	BPL PEROK
	LDA #3
	STA SECMASK
SNGLDS	LDA #0
	STA $309
	LDA #128
	STA $308
	LDA #125
	STA SECBYTE
	RTS

PEROK	LDX PERCOM
	BNE PLP1
	INX ; tracks = 0 means harddisk
PLP1	CLC
	LDA SECMASK
	ADC PERCOM+3
	STA SECMASK
	LDA SECBYTE
	ADC PERCOM+2
	STA SECBYTE
	DEX
	BNE PLP1
	LDA PERCOM+4
	BEQ PERSS
	ASL SECMASK	; double sided
	ROL SECBYTE
PERSS	LDA SECBYTE
	CMP #4
	BCC PERSML	; less than 1024 sectors -> small
	BNE PERBIG	; more than 1280 -> big
	LDA SECMASK
	CMP #$10
	BNE PERBIG	; 1040 sectors?
	LDA PERCOM+6
	BNE PERBIG	; 1040/SD -> small
PERSML	LDA #3
	STA SECMASK
	BNE PERDNS
PERBIG	LDA #$FF
	STA SECMASK

PERDNS	LDA PERCOM+6
	BEQ SNGLDS
	STA $309
	LDA PERCOM+7
	STA $308
	LDA #253
	STA SECBYTE
	RTS

	.IF (*<PICOSTART+$100)
	.DC (PICOSTART+$100-*) 0
	.ENDIF

; ab hier: eigentliches Lade-Programm


ENDX	RTS
NE459	JMP $E459

XREG	.BYTE 0
YREG	.BYTE 0
SECMASK	.BYTE 0
SECBYTE	.BYTE 0

LOAD	JSR CLRMEM
	LDA #0
	STA 580

	LDA #<ENDX
	STA 738
	LDA #>ENDX
	STA 739

	LDA #<BUF
	STA DBUF
	LDA #>BUF
	STA DBUF+1
	TAX
	STA BYTES

	GET
	CMP #255
	BEQ COMFOR
	JMP LOAD2

COMFOR	GET

	GET
	STA ADD
	STA 736
	GET
	STA ADD+1
	STA 737

XXX	GET	; End-Adr LO
	SEC
	SBC ADD
	STA EN
	PHP
	GET	; End-Adr HI
	PLP
	SBC ADD+1
	STA EN+1

	INC EN
	INC EN+1
	LDY #0

MLOOP	CPX BYTES
	BNE NRRD

DORD	JSR RREAD

	LDA EN+1
	CMP #2
	BCC NRRD
	LDA BYTES
	CMP SECBYTE
	BNE NRRD

; bei 125 oder 253 Bytes: schnelle Kopierroutine nehmen

	TYA
	CLC
	ADC ADD
	STA ADD
	BCC NI01
	INC ADD+1
NI01	LDY SECBYTE
	DEY
COP4	LDA BUF,Y
	STA (ADD),Y
	DEY
	LDA BUF,Y
	STA (ADD),Y
	DEY
	LDA BUF,Y
	STA (ADD),Y
	DEY
	LDA BUF,Y
	STA (ADD),Y
	DEY
	BNE COP4
	LDA BUF,Y
	STA (ADD),Y
	CLC
	LDA ADD
	ADC SECBYTE
	STA ADD
	BCC NI02
	INC ADD+1
NI02	SEC
	LDA EN
	BNE NEN1
	INC EN+1
NEN1	SBC SECBYTE
	STA EN
	BNE NEN2
	DEC EN+1
NEN2	BCS ND01
	DEC EN+1
ND01	JMP DORD

NRRD	LDA BUF,X
	INX
	STA (ADD),Y

	DEC EN
	BNE ADPLUS
	DEC EN+1
	BEQ ENDBLK

ADPLUS	INY
	BNE MLOOP
	INC ADD+1
	BNE MLOOP

ENDBLK	LDA 739
	CMP #>ENDX
	BNE XINIT

GT	GET	; Start LO
	STA ADD
	GET	; Start HI
	STA ADD+1
	AND ADD
	CMP #$FF
	BEQ GT
	JMP XXX

XINIT	STX XREG
	JSR INADJ ; und init!
WTSYNC	LDA $D40B
	BNE WTSYNC
	LDX XREG
	LDA #<ENDX
	STA 738
	LDA #>ENDX
	STA 739
	JMP GT

RREAD	STY YREG
	LDY SECBYTE
	LDA BUF,Y
	AND SECMASK
	STA DSEC+1 ; Sektor-Nr. HI
	INY
	LDA BUF,Y
	STA DSEC	; Sektor-Nr. LO
	ORA DSEC+1
	BEQ EOF
RRAGAIN	LDA #$40	; Direction = INput
	STA $303

	JSR NE459 ; und lesen
	BMI RRAGAIN

	LDX #0
	LDY SECBYTE
	LDA BUF+2,Y
	STA BYTES
	BEQ RREAD
	LDY YREG
	RTS

EOF	PLA
	PLA
	JMP ENDE2

INADJ	JMP (738)
RUADJ	JMP (736)

ENDE2	JSR INADJ ; Starte Programm
	JSR RUADJ
	JMP (10)

SIOMAX	= 768
SIOADR	.DC SIOMAX 0

; LOAD BASIC PROGRAM

RUNBAS	LDA #<BASEND
	STA $2E7
	LDA #>BASEND
	STA $2E8
	JSR $B755
	LDY #$5E
	LDA $A95E
	CMP #$20
	BEQ X001
	INY
X001	STY BASGO+1
BASGO	JMP $A920

LOADBAS	LDA $BFFD
	BNE BASON

	JMP BASERR

BASON	TYA
	PHA

	LDA #<RUNBAS
	STA $C
	STA $2E0
	LDA #>RUNBAS
	STA $D
	STA $2E1
	LDA #1
	STA 9
	LDA #0
	STA 580
	LDA #<ENDX
	STA 738
	LDA #>ENDX
	STA 739

	LDA #<BASEND
	STA $80
	LDA #>BASEND
	STA $81

	PLA
	TAY

STORLP	GET
	STA TLO
	GET
	STA THI
	CLC
	LDA TLO
	ADC $80
STORL	STA $82
	LDA THI
	ADC $81
STORH	STA $83
	INC STORL+1
	INC STORL+1
	INC STORH+1
	INC STORH+1
	LDA STORL+1
	CMP #$8E
	BNE STORLP

	LDA $8C
	STA $8E
	STA $90
	STA $0E

	LDA $8D
	STA $8F
	STA $91
	STA $0F

	LDA $82
	STA STADR+1
	LDA $83
	STA STADR+2

LDBASLP	GET
STADR	STA 12345
	INC STADR+1
	BNE LDBASLP
	INC STADR+2
	BNE LDBASLP

TLO	.BYTE 0
THI	.BYTE 0

BASERR	LDX #0
PRLP	LDA BERRTXT,X
	STX TLO
	JSR OUTCHR
	LDX TLO
	INX
	CPX #BERRLN
	BNE PRLP
	JMP *

OUTCHR	TAX
	LDA $E407
	PHA
	LDA $E406
	PHA
	TXA
	RTS

BERRTXT	.BYTE 253
	.BYTE "Error - Basic not "
	.BYTE "found!"
BERRLN	= *-BERRTXT

BASEND	= *

;**************************

LOAD2	LDA #1
	STA 9
	GET

	CMP #0
	BNE BINOK
	JMP LOADBAS

BINOK	GET
	STA $304	; Start-Adr. LO
	GET
	STA $305	; Start-Adr. HI
	CLC
	LDA $304	; Start-Adr + 6 =
;		* Init-Adresse
	ADC #6
	STA 0
	LDA $305
	ADC #0
	STA 1

	GET
	STA 12	; Run-Adr. LO
	GET
	STA 13	; Run-Adr. HI

	LDA NE459+1
	STA LBIN+1
	LDA NE459+2
	STA LBIN+2
	LDA SECMASK
	STA L2MASK+1
	LDA SECBYTE
	STA L2BYTE+1

; kopiere Laderoutine nach $80

	LDX #ENDE3-LO2LOP
L2CLOP	LDA LO2LOP,X
	STA 128,X
	DEX
	BPL L2CLOP
	JMP 128

; das hier ist die Laderoutine:

LO2LOP	LDA #$40
	STA $303
LBIN	JSR $E459
	BMI END4

	LDA $304
	STA ADR
	LDA $305
	STA ADR+1

L2BYTE	LDY #253
	LDA (ADR),Y ; naechster
L2MASK	AND #$FF
	STA DSEC+1

	INY
	LDA (ADR),Y
	STA DSEC
	ORA DSEC+1
	BEQ END4

	INY
	CLC
	LDA $304
	ADC (ADR),Y
	STA $304
	BCC LO2LOP
	INC $305
	BNE LO2LOP

END4	; JSR JJ1
	.BYTE $20
	.WORD JJ1
	; JSR JJ2
	.BYTE $20
	.WORD JJ2
	JMP (10)

JJ1	= *-LO2LOP+128
	JMP (0)
JJ2	= *-LO2LOP+128
	JMP (12)

ENDE3	= *

;************************************

GETSIO	LDA #$31
	STA $300
	LDA #1
	STA $301
	LDA #$68
	STA $302
	LDA #$40
	STA $303
	LDA #8
	STA $304
	STA $306
	LDA #3
	STA $305
	LDA #2
	STA $308
	LDA #0
	STA $309
	JSR $E459
	BMI NOSIO

; don't load SIO routine if it is too large

	LDA $309
	CMP #>SIOMAX
	BCS NOSIO

	INC $302
	LDA #<SIOADR
	STA $304
	STA $30A
	LDA #>SIOADR
	STA $305
	STA $30B
	LDA #$40
	STA $303
	JSR $E459
	BMI NOSIO

	LDA #<SIOADR
	STA NE459+1
	LDA #>SIOADR
	STA NE459+2

NOSIO	RTS

PERCOM	.DC 12 0

MENU	JSR GETSIO

	LDA NE459+1
	STA ME459
	LDA NE459+2
	STA ME459+1

	LDA 560
	STA OLD560
	LDA 561
	STA OLD560+1
	LDA 710
	STA OLD710

	JSR HISTAT
	STW 560,DLIST
	LDA #DEFDRIVE
	STA $301

NEWDISK	STW DIRSEC,ORIGDIR
	LDA #0
	STA 710
	STA STACKPTR
	JSR CLS
	LDA $301
	CLC
	ADC #$90
	STA DSKSTAT
	JSR SETDENS

	LDA SECBYTE
	STA DSKBYT
	LDA SECMASK
	STA DSKMSK

	LDX DSKFOR
	BEQ FORAUT
	DEX
	LDA DBYTTAB,X
	STA SECBYTE
	LDA DMSKTAB,X
	STA SECMASK

FORAUT	JSR PRTFOR

LOOP	JSR READDIR

CHOICE	JSR SELECT
	BCS DIRUP

	LDA YPOS
	ASL
	CLC
	ADC YPOS
	CLC
	ADC XPOS
	TAX
	LDA FFLAG,X
	BEQ SUBDIR
	LDY SECBYTE
	LDA STSECHI,X
	STA BUF,Y
	LDA STSECLO,X
	INY
	STA BUF,Y
	LDA OLD560
	STA 560
	STA $D402
	LDA OLD560+1
	STA 561
	STA $D403
	LDA OLD710
	STA 710
	STA $D018

	LDX #CLRLEN-1
CCL	LDA CLRMEM2,X
	STA CLRMEM,X
	DEX
	BPL CCL
	JMP LOAD

SUBDIR	STX TEMP
	LDA DIRSEC
	PUSH
	LDA DIRSEC+1
	PUSH
	LDX TEMP
	LDA STSECLO,X
	STA DIRSEC
	LDA STSECHI,X
	STA DIRSEC+1
	JMP LOOP

DIRUP	LDA STACKPTR
	BEQ CHOICE
	POP
	STA DIRSEC+1
	POP
	STA DIRSEC
	JMP LOOP

SELECT	LDA MAXY
	CMP #$FF
	BNE FILESOK

	JMP NOFILES

FILESOK	LDA #0
	STA XPOS
	STA YPOS

SELLP	JSR INVERS
	JSR GETKEY
	PHA
	JSR INVERS
	PLA
	CMP #'+
	BNE NCLEFT
YCLEFT	JMP CLEFT
NCLEFT	CMP #30
	BEQ YCLEFT
	CMP #'*
	BNE NCRIGHT
YCRIGHT	JMP CRIGHT
NCRIGHT	CMP #31
	BEQ YCRIGHT
	CMP #'-
	BNE NCUP
YCUP	JMP CUP
NCUP	CMP #28
	BEQ YCUP
	CMP #'=
	BNE NCDOWN
YCDOWN	JMP CDOWN
NCDOWN	CMP #29
	BEQ YCDOWN
	CMP #155
	BNE NCR
	LDA FILES
	BEQ NCR
	JMP RETURN
NCR	CMP #27
	BNE NESC
	JMP ESCAPE
NESC	CMP #'H
	BNE NKEYH
	JMP KEYH
NKEYH	CMP #'1
	BCC NKEY18
	CMP #'9
	BCS NKEY18
	JMP KEY18
NKEY18	CMP #'F
	BNE NKEYF
	JMP KEYF
NKEYF	JMP SELLP

CLEFT	DEC XPOS
	BPL CLOK
	LDA #2
	STA XPOS
	DEC YPOS
	BPL CLOK
	LDA #0
	STA XPOS
	STA YPOS
CLOK	JMP SELLP


CRIGHT	LDA YPOS
	CMP MAXY
	BEQ CRMY

	INC XPOS
	LDA XPOS
	CMP #3
	BNE CROK
	LDA #0
	STA XPOS
	INC YPOS
	JMP CROK	

CRMY	LDA XPOS
	CMP MAXX
	BEQ CROK
	INC XPOS

CROK	JMP SELLP

CUP	LDA YPOS
	BEQ CUOK
	DEC YPOS
CUOK	JMP SELLP

CDOWN	LDA YPOS
	CMP MAXY
	BEQ CDOK

	INC YPOS
	LDA YPOS
	CMP MAXY
	BNE CDOK

	LDA XPOS
	CMP MAXX
	BCC CDOK
	BEQ CDOK

	LDX MAXY
	DEX
	STX YPOS
CDOK	JMP SELLP


RETURN	JSR INVERS
	CLC
	RTS

ESCAPE	SEC
	RTS


KEY18	SEC
	SBC #'0
	STA $301
	PLA
	PLA
	JMP NEWDISK

KEYH	LDA NE459+2
	CMP #$E4
	BEQ HION

	LDA #$59
	STA NE459+1
	LDA #$E4
	STA NE459+2
	JMP ENDHI

HION	LDA ME459
	STA NE459+1
	LDA ME459+1
	STA NE459+2

ENDHI	JSR HISTAT
	JMP SELLP

KEYF	INC DSKFOR
	LDA DSKFOR
	CMP #5
	BNE NDFOR0
	LDA #0
	STA DSKFOR
	LDA DSKMSK
	STA SECMASK
	LDA DSKBYT
	STA SECBYTE
	JMP ENDKEYF
NDFOR0	TAX
	DEX
	LDA DBYTTAB,X
	STA SECBYTE
	LDA DMSKTAB,X
	STA SECMASK

ENDKEYF	JSR PRTFOR
	JMP SELLP


HISTAT	LDA NE459+2
	CMP #$E4
	BEQ HIOFF

	LDA #$AE
	STA SIOSTAT
	LDA #86
	STA SIOSTAT+1
	LDA #0
	STA SIOSTAT+2
	RTS
HIOFF	LDA #$A6
	STA SIOSTAT
	STA SIOSTAT+1
	LDA #86
	STA SIOSTAT+2
	RTS

NOFILES	RTS

INVERS	JSR SETADR
	LDY #12
ILP	LDA (SADR),Y
	EOR #$80
	STA (SADR),Y
	DEY
	BPL ILP
	JSR CHKCURS	
	RTS

SETADR	LDA YPOS
	STA SADR
	LDA #0
	STA SADR+1
	ASL SADR
	ROL SADR+1
	ASL SADR
	ROL SADR+1
	ASL SADR
	ROL SADR+1
	LDA SADR
	STA TEMPV
	LDA SADR+1
	STA TEMPV+1
	ASL TEMPV
	ROL TEMPV+1
	ASL TEMPV
	ROL TEMPV+1
	CLC
	LDA SADR
	ADC TEMPV
	STA SADR
	LDA SADR+1
	ADC TEMPV+1
	STA SADR+1
	LDX XPOS
	CLC
	LDA XTAB,X
	ADC SADR
	STA SADR
	LDA SADR+1
	ADC #>SCREEN
	STA SADR+1	
	RTS

CHKCURS	LDA YPOS
	CMP SCRY
	BCC CLOW
	CLC
	LDA SCRY
	ADC #LINES-1
	CMP YPOS
	BCC CHIGH
	RTS	

CLOW	LDA YPOS
	STA SCRY
	JSR SETSCR
	RTS

CHIGH	SEC
	LDA YPOS
	SBC #LINES-1
	STA SCRY
	JSR SETSCR
	RTS

SETSCR	LDA SCRY
	STA SLMS
	LDA #0
	STA SLMS+1
	ASL SLMS
	ROL SLMS+1
	ASL SLMS
	ROL SLMS+1
	ASL SLMS
	ROL SLMS+1
	LDA SLMS
	STA TEMPV
	LDA SLMS+1
	STA TEMPV+1
	ASL TEMPV
	ROL TEMPV+1
	ASL TEMPV
	ROL TEMPV+1
	CLC
	LDA SLMS
	ADC TEMPV
	STA SLMS
	LDA SLMS+1
	ADC TEMPV+1
	STA SLMS+1
	CLC
	LDA SLMS+1
	ADC #>SCREEN
	STA SLMS+1
	RTS


DIRSEC	.WORD 0
OLD560	.WORD 0
OLD710	.BYTE 0
ME459	.WORD 0

DSKFOR	.BYTE 0
DSKMSK	.BYTE 0
DSKBYT	.BYTE 0

DBYTTAB	.BYTE 125,125,253,253
DMSKTAB	.BYTE $03,$FF,$03,$FF

DLIST	.BYTE 112,112,112,$42
	.WORD TITLE
	.BYTE 112,112,112,2,$42
	.WORD TLINE
	.BYTE $42
SLMS	.WORD SCREEN
	.BYTE 2,2,2,2,2,2,2,2,2,$42
	.WORD TLINE
	.BYTE 112,112,112,$42
	.WORD TSELECT
	.BYTE 0,2,0,2,0,2
	.BYTE $41
	.WORD DLIST


DSKERR	.SBYTE "Disk Error!"
DERRLEN	= *-DSKERR

;	        12345678901234567890
TSELECT	.SBYTE "    "
	.SBYTE "use"
	.BYTE 66,222,86
	.BYTE 66,223,86
	.BYTE 66,220,86
	.BYTE 66,221,86
	.BYTE 66
	.SBYTE +$80,"RETURN"
	.BYTE 86
	.SBYTE "to select"
	.SBYTE "    "
	

	.BYTE 66
	.SBYTE +$80,"ESC"
	.BYTE 86
	.SBYTE " = parent DIR"
	.SBYTE "  "
	.BYTE 66
	.SBYTE +$80,"1"
	.BYTE 86
	.SBYTE "-"
	.BYTE 66
	.SBYTE +$80,"8"
	.BYTE 86
	.SBYTE " = D1: - D8: "

	.SBYTE "    "
	.BYTE 66
	.SBYTE +$80,"H"
	.BYTE 86
	.SBYTE " = high speed"
	.SBYTE " SIO on/off:"
	.BYTE 66
	.SBYTE +$80,"O"

SIOSTAT	.SBYTE +$80,"FF"
	.BYTE 86
	.SBYTE "   "

	.SBYTE "   "
	.BYTE 66
	.SBYTE +$80,"F"
	.BYTE 86
	.SBYTE " = disk format:"

FORLEN	= 19

DFORMAT	.DC FORLEN 0

FORASD	.BYTE 66
	.SBYTE +$80,"AUTO"
	.BYTE 86
	.SBYTE "(SD/DOS2.x)  "

FORASM	.BYTE 66
	.SBYTE +$80,"AUTO"
	.BYTE 86
	.SBYTE "(SD/MyDOS)   "

FORADD	.BYTE 66
	.SBYTE +$80,"AUTO"
	.BYTE 86
	.SBYTE "(DD/DOS2.x)  "

FORADM	.BYTE 66
	.SBYTE +$80,"AUTO"
	.BYTE 86
	.SBYTE "(DD/MyDOS)   "

FORSD	.BYTE 66
	.SBYTE +$80,"SD/DOS2.x"
	.BYTE 86
	.SBYTE "        "

FORSM	.BYTE 66
	.SBYTE +$80,"SD/MyDOS"
	.BYTE 86
	.SBYTE "         "

FORDD	.BYTE 66
	.SBYTE +$80,"DD/DOS2.x"
	.BYTE 86
	.SBYTE "        "

FORDM	.BYTE 66
	.SBYTE +$80,"DD/MyDOS"
	.BYTE 86
	.SBYTE "         "

TITLE	.SBYTE "  MyPicoDos 3.0 (c) "
	.SBYTE "HiassofT 1992-2003  "

	.SBYTE "                 "
	.BYTE 66
	.SBYTE +$80,"D"
DSKSTAT	.SBYTE +$80,"1:"
	.BYTE 86
	.SBYTE "                  "

TLINE	.BYTE "RRRRRRRRRRRRRRRRRRRR"
	.BYTE "RRRRRRRRRRRRRRRRRRRR"

LINES	= 10

READSEC LDA #$52
	STA $302
	LDA #$40
	STA $303
	LDA #7
	STA $306
	LDA #0
	STA $307
	JMP NE459

READDIR	LDA DIRSEC
	STA $30A
	LDA DIRSEC+1
	STA $30B
	JSR CLS
	LDA #0
	STA FILES
	STA MAXX
	STA MAXY

	STW $304,SECBUF
	STW SADR,SCREEN

	LDA #8
	STA REMAIN

RDDIRLP	JSR READSEC
	BMI DIRERR
	LDX #0
RDFILLP	LDA SECBUF,X
	CMP #0
	BEQ ENDRDIR

	CMP #$10
	BNE NFNDDIR

	JSR FNDDIR
	JMP NOFND

DIRERR	JSR CLS
	LDA #0
	STA FILES
	STA MAXX
	STA MAXY
	LDX #DERRLEN-1
DERRLP	LDA DSKERR,X
	STA SCREEN+2,X
	DEX
	BPL DERRLP
	RTS

NFNDDIR	AND #$C3
	CMP #$42
	BNE NOFND

	JSR FNDFILE

NOFND	TXA
	CLC
	ADC #$10
	TAX
	BPL RDFILLP

	DEC REMAIN
	BEQ ENDRDIR

	INC $30A
	BNE RDDIRLP
	INC $30B
	JMP RDDIRLP

ENDRDIR	JSR CORRECT
	RTS


FNDDIR	STX TEMP
	LDY FILES
	LDA #0
	STA FFLAG,Y
	LDA SECBUF+3,X
	STA STSECLO,Y
	LDA SECBUF+4,X
	STA STSECHI,Y

	TXA
	CLC
	ADC #5
	STA WRDIR+1
	LDA #>SECBUF
	STA WRDIR+2
	LDX MAXX
	LDA XTAB,X
	CLC
	ADC #11
	TAY
	LDX #10

WRDIR	LDA 12345,X
	INTERNAL
	STA (SADR),Y
	DEY
	DEX
	BPL WRDIR
	LDA #30
	STA (SADR),Y

	INC FILES
	INC MAXX
	LDA MAXX
	CMP #3
	BNE NIMY1
	INC MAXY
	LDA #0
	STA MAXX
	CLC
	LDA SADR
	ADC #40
	STA SADR
	BCC NIMY1
	INC SADR+1

NIMY1	LDX TEMP
	RTS


FNDFILE	STX TEMP
	LDY FILES
	LDA #1
	STA FFLAG,Y
	LDA SECBUF+3,X
	STA STSECLO,Y
	LDA SECBUF+4,X
	STA STSECHI,Y

	TXA
	CLC
	ADC #5
	STA WRFILE+1
	LDA #>SECBUF
	STA WRFILE+2
	LDX MAXX
	LDA XTAB,X
	CLC
	ADC #11
	TAY
	LDX #10
WRFILE	LDA 12345,X
	INTERNAL
	STA (SADR),Y
	DEY
	DEX
	BPL WRFILE

	INC FILES
	INC MAXX
	LDA MAXX
	CMP #3
	BNE NIMY2
	INC MAXY
	LDA #0
	STA MAXX
	CLC
	LDA SADR
	ADC #40
	STA SADR
	BCC NIMY2
	INC SADR+1

NIMY2	LDX TEMP
	RTS


CORRECT	DEC MAXX
	BPL ENDCOR
	LDA #2
	STA MAXX
	DEC MAXY
ENDCOR	RTS


CLS	LDA #0
	TAY
CLSLP	STA SCREEN,Y
	STA SCREEN+$100,Y
	STA SCREEN+$200,Y
	STA SCREEN+$300,Y
	DEY
	BNE CLSLP
	STA SCRY
	JSR SETSCR
	RTS

GETKEY	LDA $E425
	PHA
	LDA $E424
	PHA
	RTS

CLRMEM2	LDA #<ENDE3
	STA 0
	LDA #>ENDE3
	STA 1
	LDA #0
	TAY
	LDX #($40-(>ENDE3))
MEMCLR	STA (0),Y
	DEY
	BNE MEMCLR
	INC 1
	DEX
	BNE MEMCLR
	RTS

PRTFOR	LDA #0
	STA PRTFSEL
	LDA SECMASK
	CMP #$FF
	BNE PNOMY
	INC PRTFSEL
PNOMY	LDA SECBYTE
	CMP #253
	BNE PNODD
	LDA PRTFSEL
	ORA #2
	STA PRTFSEL
PNODD	LDA DSKFOR
	BEQ PFAUTO
	LDA PRTFSEL
	ORA #4
	STA PRTFSEL
PFAUTO	LDA PRTFSEL
	ASL
	TAX
	LDA PFTAB,X
	STA PRTFLP+1
	LDA PFTAB+1,X
	STA PRTFLP+2
	
	LDX #FORLEN-1
PRTFLP	LDA $1234,X
	STA DFORMAT,X
	DEX
	BPL PRTFLP
	RTS

PRTFSEL	.BYTE 0

PFTAB	.WORD FORASD, FORASM, FORADD, FORADM
	.WORD FORSD, FORSM, FORDD, FORDM

CLRLEN	= *-CLRMEM2

XTAB	.BYTE 1,14,27

	.IF .DEF MYPDOSATR

	.IF (*&127)<>0
	.DC (128-(*&127)) 0
	.ENDIF

	.ENDIF

PICOEND	= *
