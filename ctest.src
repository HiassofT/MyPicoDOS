;  ctest - test erasing/flashing the cart
;
;  Copyright (C) 2010 Matthias Reichl <hias@horus.com>
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

	.include "cio.inc"
	.include "libflash.inc"
	.include "arith.inc"

; temporary ZP vectors
SRCVEC	= $E6	; ,$E7 ($E0-$E5 are used by libflash)
DSTVEC	= $E8	; ,$E9
TMPVEC	= SRCVEC	; for romram.src

START	= $2000

	.BANK
	* = START

	JSR INIT
	JSR FINIT
	JSR FDISABLE

; clear RAM from $8000-$BFFF
	LDA #0
	STA DSTVEC
	LDA #$80
	STA DSTVEC+1
	LDY #0
	LDX #$40	; 16k = 64 pages
	LDA #0
CLRLP	STA (DSTVEC),Y
	INY
	BNE CLRLP
	INC DSTVEC+1
	DEX
	BNE CLRLP

MAINLP	BPUT 0, TTITLEL, TTITLE
	JSR FINIT
	JSR FENABLE

.if .def ATARIMAX8
; detect second chip
	LDA #8
	STA FLASHADR+2
	JSR FDETECT
	LDA FTYPE
	STA FTYPE2
	LDA #0
	STA FLASHADR+2
.endif

	JSR FDETECT
	JSR FDISABLE

	LDA FTYPE
	JSR PFTYPE
	LDA FTYPE
	BPL FOK

	JSR GETCHAR
	CPY #128
	BNE MAINLP
MXIT	JMP EXIT

FOK
.if .def ATARIMAX8
	BPUT 0, TCHIPL, TCHIP
	LDA #$0F
	STA ENDHI
	LDA #'2
	LDX FTYPE
	CPX FTYPE2
	BEQ AMAX2
	LDA #7
	STA ENDHI
	LDA #'1
AMAX2	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR
.endif

MOK	BPUT 0, TMENUL, TMENU

MENULP	
	JSR GETCHAR
	CPY #128
	BNE MENUL1
	JMP MAINLP
MENUL1	CMP #'0
	BNE NEXIT
EXIT	JSR CLEANUP
	JMP ($A)

NEXIT	CMP #'1
	BNE MENULP

	JSR PUTCHAR

	LDA #155
	JSR PUTCHAR

; reset loop counter
	LDA #0
	STA LOOPCNT
	STA LOOPCNT+1

TESTLP	LDA #155
	JSR PUTCHAR
	JSR PLOOP

	BPUT 0, TERASL, TERAS

	JSR FADRZERO
	JSR FENABLE
	JSR FCERAS

.if .def ATARIMAX8
; also erase second chip, combine status results
	PHP
	LDA ENDHI
	CMP #$0F
	BNE AMAX1	; only one chip detected

	PLA
	STA TMPSTAT
	LDA #8
	STA FLASHADR+2
	JSR FCERAS
	PHP
	PLA
	ORA TMPSTAT
	PHA
AMAX1	PLP
.endif
	PHP
	JSR FDISABLE
	PLP
	BPL TEST1
	JSR PERROR
	JMP DOCONT
TEST1	JSR POK

.if .def ATARIMAX8
; set flash address to $2000
	LDA #$20
	STA FLASHADR+1
.else
; set flash address to $4000
	LDA #$40
	STA FLASHADR+1
.endif
	LDA #0
	STA FLASHADR
	STA FLASHADR+2
	LDA #<DATABUF
	STA DATAADR
	LDA #>DATABUF
	STA DATAADR+1

TESTLP1	JSR PFLADR

; fill buffer with random data
	LDA #<DATABUF
	STA DSTVEC
	LDA #>DATABUF
	STA DSTVEC+1
	LDX #$20	; $20 pages = 8k
	LDY #0
RNDLP	LDA $D20A
	STA (DSTVEC),Y
	INY
	BNE RNDLP
	INC DSTVEC+1
	DEX
	BNE RNDLP
	
	JSR FENABLE
	LDX #$20
	JSR FWPAGE
	BMI TEST2E
	LDX #$20
	JSR FCPAGE
TEST2E	PHP
	JSR FDISABLE
	PLP
	BPL TEST2
	JSR PERRADR
	JSR PERRTYP
	JMP DOCONT
TEST2	JSR POK

	CLC
	LDA FLASHADR+1
	ADC #$20
	STA FLASHADR+1
	BCC TEST3
	INC FLASHADR+2
TEST3	
	LDA FLASHADR+2
.if .def ATARIMAX8
	CMP ENDHI	; $0FE000/$07E000 = 1024k-8k/512k-8
	BNE TESTLP1
	LDA FLASHADR+1
	CMP #$E0
.else
	CMP #8	; $080000 = 512k
.endif
	BNE TESTLP1
	INC LOOPCNT
	BNE L1
	INC LOOPCNT+1

L1	JMP TESTLP

DOCONT	JSR PLOOP
	BPUT 0, TCONTL, TCONT
	JSR GETCHAR
	JMP MAINLP

INIT	LDA 106
	STA M106
	LDA 740
	STA M740
	LDA #$80
	STA 106
	STA 740
	JSR GR0

	LDA $D301
	STA MD301
	ORA #2
	STA $D301
	RTS

CLEANUP	LDA MD301
	STA $D301
	LDA M106
	STA 106
	LDA M740
	STA 740
	JMP GR0

M106	.BYTE 0
M740	.BYTE 0
MD301	.BYTE 0

TMPSTAT	.BYTE 0

TFA10	.BYTE "Detected ", $99
	.BYTE +$80,"AMD 29F010"
	.BYTE $19,155

TFA10B	.BYTE "Detected ", $99
	.BYTE +$80,"AMD 29F010B"
	.BYTE $19,155

TFA40B	.BYTE "Detected ", $99
	.BYTE +$80,"AMD 29F040B"
	.BYTE $19,155

TFS10B	.BYTE "Detected ", $99
	.BYTE +$80,"ST 29F010B"
	.BYTE $19,155

TFS40B	.BYTE "Detected ", $99
	.BYTE +$80,"ST 29F040B"
	.BYTE $19,155

TFB40	.BYTE "Detected ", $99
	.BYTE +$80,"BM 29F040"
	.BYTE $19,155

TUNKFL	.BYTE "No or unknown flash",155


; print flash type
PFTYPE	CMP #TAMD10
	BNE PFTYPE1
	PRINT 0, TFA10
	RTS
PFTYPE1	CMP #TAMD10B
	BNE PFTYPE2
	PRINT 0, TFA10B
	RTS
PFTYPE2	CMP #TAMD40B
	BNE PFTYPE3
	PRINT 0, TFA40B
	RTS
PFTYPE3	CMP #TST10B
	BNE PFTYPE4
	PRINT 0, TFS10B
	RTS
PFTYPE4	CMP #TST40B
	BNE PFTYPE5
	PRINT 0, TFS40B
	RTS
PFTYPE5	CMP #TBM40
	BNE PFTYPE6
	PRINT 0, TFB40
	RTS

PFTYPE6	PRINT 0, TUNKFL
	RTS

; print flash address
PFLADR	LDA FLASHADR+2
	JSR PUTHEX
	LDA FLASHADR+1
	JSR PUTHEX
	LDA FLASHADR+0
	JSR PUTHEX
	RTS

; print error plus internal flash address
PERRADR	BPUT 0, TERRADRL, TERRADR
	LDA FLASHADI+2
	JSR PUTHEX
	LDA FLASHADI+1
	JSR PUTHEX
	LDA FLASHADI
	JSR PUTHEX
	LDA #155
	JMP PUTCHAR

; print error type
PERRTYP	LDA FERROR
	CMP #EFLFTO
	BNE PERRT1
	BPUT 0, TERRTOL, TERRTO
	RTS

PERRT1	CMP #EFLDVE
	BNE PERRT2
	BPUT 0, TERRVEL, TERRVE
	LDA FERRUD
	JSR PUTHEX
	BPUT 0, TERRV2L, TERRV2
	LDA FERRFD
	JSR PUTHEX
	LDA #155
	JSR PUTCHAR
PERRT2	RTS

; print loop counter
PLOOP	BPUT 0, TLOOPL, TLOOP
	LDX LOOPCNT
	LDY LOOPCNT+1
	JSR PRDEC
	LDA #155
	JSR PUTCHAR
	RTS

LOOPCNT	.WORD 0

.if .def ATARIMAX8
FTYPE2	.BYTE 0
ENDHI	.BYTE 0

TCHIP	.BYTE "number of chips: "
TCHIPL	= * - TCHIP
.endif

.if .def ATARIMAX8
TTITLE	.BYTE 125, "AtariMax 8MBit FlashCart Tester V0.3",155
.else
TTITLE	.BYTE 125, "Mega 512k FlashCart Tester V0.3",155
.endif
	.BYTE "(c) 2010 by Matthias Reichl",155,155
TTITLEL	= * - TTITLE

TMENU	.BYTE 155,155
	.BYTE "1) Test flash cart",155
	.BYTE "0) Exit program",155
	.BYTE "> "
TMENUL	= * - TMENU

TERRADR	.BYTE 155, "Error at address $"
TERRADRL = * - TERRADR

TERRTO	.BYTE "flash programming failed",155
TERRTOL	= * - TERRTO

TERRVE	.BYTE "verify error: data = "
TERRVEL	= * - TERRVE

TERRV2	.BYTE " flash = "
TERRV2L	= * - TERRV2

TLOOP	.BYTE "loop counter: "
TLOOPL	= * - TLOOP

TERAS	.BYTE " erase"
TERASL	= * - TERAS

TCONT	.BYTE 155
	.BYTE "Press any key to continue > "
TCONTL	= * - TCONT

	.include "iohelp.src"
	.include "arith.src"

	.include "libflash.src"

DATABUF = (*+255) & $FF00

	.BANK
	* = $2E0
	.WORD START

