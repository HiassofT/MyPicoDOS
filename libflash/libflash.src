;  libflash - generic flash programming code
;
;  Copyright (C) 2004-2010 Matthias Reichl <hias@horus.com>
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

	.include "libflash-inc-target.inc"

; initialize flash address to 0
FADRZERO
	LDA #0
	STA FLASHADR
	STA FLASHADR+1
	STA FLASHADR+2
	STA FLASHADR+3
	RTS

; copy external flash and user data addresses to
; internal FLASHADI and DATAVEC variables
?FCOPADR
	LDA FLASHADR
	STA FLASHADI
	LDA FLASHADR+1
	STA FLASHADI+1
	LDA FLASHADR+2
	STA FLASHADI+2
	LDA DATAADR
	STA DATAVEC
	LDA DATAADR+1
	STA DATAVEC+1
	RTS

; increment internal flash address by 1 page (256 bytes)
?FADRIP	INC FLASHADI+1
	BNE ?FADRIP1
	INC FLASHADI+2
?FADRIP1
	RTS

; setup all addresses
?FSETUPA
	JSR ?FCOPADR
	JMP ?FSETADR

; convert relative address in FLASHTMP (lo, mid) and FBANKTMP (hi)
; into absolute addresses
FSETTMP
	LDA FLASHTMP+1
	PHA
.IF BANKSIZ = 16
; 16k banks
	ASL FLASHTMP+1
	ROL FBANKTMP
	ASL FLASHTMP+1
	ROL FBANKTMP
	PLA
	AND #$3F
.ELSE
	ASL FLASHTMP+1
	ROL FBANKTMP
	ASL FLASHTMP+1
	ROL FBANKTMP
	ASL FLASHTMP+1
	ROL FBANKTMP
	PLA
	AND #$1F
.ENDIF
	CLC
	ADC #>BANKBAS
	STA FLASHTMP+1
	RTS

; convert internal flash address in FLASHADI to absolute address/bank,
; sets FLASHVEC (absolute adress) and ?BANKNO, ?BASEBNK
?FSETADR
; copy address in temporary storage
	LDA FLASHADI
	STA FLASHTMP
	LDA FLASHADI+1
	STA FLASHTMP+1
	LDA FLASHADI+2
	STA FBANKTMP
	JSR FSETTMP

; copy address from FLASHTMP to FLASHVEC
	LDA FLASHTMP
	STA FLASHVEC
	LDA FLASHTMP+1
	STA FLASHVEC+1

; setup bank registers
	LDA FBANKTMP
	CBASE
	STA ?BASEBNK

	LDA FBANKTMP
	CBANK
	STA ?BANKNO
	RTS

; setup addresses and check if flash address starts
; on page boundary
?FSETUPP
	STX ?FPCOUNT
	JSR ?FCOPADR
	LDY #0
	STY FERROR	; clear error flag
	LDA FLASHADI
	BEQ ?FSETUPP1
	LDA #EFLPAE	; set "page address error"
	STA FERROR
?FSETUPP1
	RTS

; setup address for byte mode: add Y to vector
?FSETUPB
	STX ?FBCOUNT

	TYA		; add Y to flash adress
	CLC
	ADC FLASHADR
	STA FLASHADI
	LDA FLASHADR+1
	ADC #0
	STA FLASHADI+1
	LDA FLASHADR+2
	ADC #0
	STA FLASHADI+2
	JSR ?FSETADR	; setup absolute adresses
	TYA		; add Y to data vector
	CLC
	ADC DATAADR
	STA DATAVEC
	LDA DATAADR+1
	ADC #0
	STA DATAVEC+1
	LDY #0		; set Y=0
	STA FERROR	; clear error flag
	RTS

; linear flash address (lo/mid/hi)
; note: 4th byte is unused
FLASHADR
	.BYTE 0,0,0,0

; linear flash address (lo/mid/hi), internal use
; note: 4th byte is unused
FLASHADI
	.BYTE 0,0,0,0

; error variable, set when flashing fails:
; 0 = OK
; 1 = flash error (timeout)
; 2 = data error (verify failed)
; $80 = address error, eg FWPAGE called on non page boundary
FERROR	.BYTE 0

; data in flash in case of a verify error
FERRFD	.BYTE 0
; user data in case of a verify error
FERRUD	.BYTE 0

; user data address
DATAADR	.BYTE 0,0

FBANKTMP .BYTE 0 ; temporary bank register
?BANKNO	.BYTE 0	; current bank number
?BASEBNK	.BYTE 0	; base bank number for signatures etc.

?FBCOUNT	.BYTE 0		; byte counter
?FPCOUNT	.BYTE 0		; page counter

; flag ram mode: 0 = RAM, $FF = flash
?FRAMMOD .BYTE $FF

; internal flash types:
?ITHI	= 0	; $5555 addresses: AMD 29F010 / BM 29F040
?ITLO	= 1	; $0555 addresses: AMD 29F010B, 29F040B / ST 29F010 / ST 29F040B
;TSSTWIN	= 2	; SST 29EE010 / Winbond 29EE011

?ITYPE	.BYTE 0

; common initialization stuff
?FINIT	LDA #$FF
	STA ?FRAMMOD
	JMP FADRZERO	; just clear flash address

MBASEBK	= ?BASEBNK

; "poke" values into flash
	.MACRO FPOKE ; ofs, value
	.IF %0 <> 2
	.ERROR "FPOKE needs 2 parameters"
	.ENDIF
	LDA #0
	STA FBANKTMP
	LDA #<[%1]
	STA FLASHTMP
	LDA #>[%1]
	STA FLASHTMP+1
	JSR FSETTMP
	LDA FBANKTMP
	CBANK
	ORA MBASEBK
	TAX
	SBANKX
	LDX #0
	LDA #[%2]
	STA (FLASHTMP,X)
	.ENDM

; common signature
?SIG	LDA ?ITYPE
	CMP #?ITLO
	BNE ?SIG1

	FPOKE $555,$AA
	FPOKE $2AA,$55
	RTS

?SIG1	FPOKE $5555,$AA
	FPOKE $2AAA,$55
	RTS


; put the flash into "read" mode
?SETREAD
	LDX #5
	JSR ?WAIT

	LDA ?ITYPE
	CMP #?ITLO
	BNE ?SETREA1

; write $F0 to any memory location
	FPOKE 0, $F0
	JMP ?XRBASE

?SETREA1
	JSR ?SIG		; write common signature
	FPOKE $5555,$F0
	JMP ?XRBASE


; put flash into "ID/autoselect" mode
?SETID	JSR ?SIG

	LDA ?ITYPE
	CMP #?ITLO
	BNE ?SETID1

	FPOKE $555,$90

; set bank for reading ID
?XRBASE	LDX ?BASEBNK
	SBANKX
	RTS

?SETID1	FPOKE $5555,$90
	JMP ?XRBASE

; common signature for chip/block erase
?SIGERAS
	JSR ?SIG

	LDA ?ITYPE
	CMP #?ITLO
	BNE ?SIGERA1

	FPOKE $555,$80
	FPOKE $555,$AA
	FPOKE $2AA,$55
	RTS

?SIGERA1
	FPOKE $5555,$80
	FPOKE $5555,$AA
	FPOKE $2AAA,$55
	RTS

; put flash into "chip erase" mode
?SETCERA
	JSR ?SIGERAS

	LDA ?ITYPE
	CMP #?ITLO
	BNE ?SETCER1

	FPOKE $555,$10
	JMP ?XRBASE

?SETCER1
	FPOKE $5555,$10
	JMP ?XRBASE

; put flash into "Block erase" mode (bank must be set correctly!)
?SETBERA
	JSR ?SIGERAS
	LDX ?BANKNO
	SBANKX

; flashadr = $30
	LDA #$30
	LDY #0
	STA (FLASHVEC),Y
	RTS
;	JMP ?XRBASE	; ????? - no, stay in current bank!

; put flash into "byte program" mode
?SETPROG
	LDX ?BASEBNK

	LDA ?ITYPE
	CMP #?ITLO
	BNE ?SETPRO1

	SBANKX
; $555 = $AA
	LDA #$AA
	STA BANKBAS+$555
; $2AA = $55
	LDA #$55
	STA BANKBAS+$2AA
; $555 = $A0
	LDA #$A0
	STA BANKBAS+$555
	RTS

?SETPRO1

.IF BANKSIZ = 16
; $5555 = $AA
	INX
	SBANKX
	LDA #$AA
	STA BANKBAS+$1555
; $2AAA = $55
	DEX
	SBANKX
	LDA #$55
	STA BANKBAS+$2AAA
; $5555 = $A0
	INX
	SBANKX
	LDA #$A0
	STA BANKBAS+$1555
.ELSE
; $5555 = $AA
	INX
	INX
	SBANKX
	LDA #$AA
	STA BANKBAS+$1555
; $2AAA = $55
	DEX
	SBANKX
	LDA #$55
	STA BANKBAS+$AAA
; $5555 = $A0
	INX
	SBANKX
	LDA #$A0
	STA BANKBAS+$1555
.ENDIF
	RTS

; wait for a short time (specified in X)
?WAIT	LDY #0
?WTLP	DEY
	BNE ?WTLP
	DEX
	BNE ?WTLP
	RTS

; detect flash type, set FTYPE
FDETECT	JSR ?FSETUPA	; setup addresses

; detect flash chips with "high" signatures
	LDA #?ITHI
	STA ?ITYPE
	JSR ?SETREAD
	JSR ?SETID

	LDX #253	; start at index -3
?DET1	INX
	INX
	INX
	LDA ?IDHI,X	; get flash type
	STA FTYPE
	BMI ?DET2	; negative means end of list
	LDA BANKBAS	; check manufacturer ID
	CMP ?IDHI+1,X
	BNE ?DET1
	LDA BANKBAS+1	; check device ID
	CMP ?IDHI+2,X
	BNE ?DET1
	BEQ ?DET4

?DET2	
; detect flash chips with "low" signatures
	LDA #?ITLO
	STA ?ITYPE
	JSR ?SETREAD
	JSR ?SETID

	LDX #253	; start at index -3
?DET3	INX
	INX
	INX
	LDA ?IDLO,X	; get flash type
	STA FTYPE
	BMI ?DET4	; negative means end of list
	LDA BANKBAS	; check manufacturer ID
	CMP ?IDLO+1,X
	BNE ?DET3
	LDA BANKBAS+1	; check device ID
	CMP ?IDLO+2,X
	BNE ?DET3

; setup flash/bank sizes etc.
?DET4
	JSR ?FSETCHP	; setup chip parameters

	JMP ?SETREAD	; set flash back to read mode
?DET5	RTS

; set chip type (A=chip type)
FSETCHP	STA FTYPE
	CMP #TNOFLSH
	BNE ?FSETCHP
	RTS

?FSETCHP
; default values
	LDA #0
	STA FSIZE
	STA FSIZE+1
	STA FSIZE+2
	STA FSIZE+3
	STA FBLKSIZ
	STA FBLKSIZ+1
	STA FBLKSIZ+2
	STA FBLKSIZ+3
	STA FBLKMSK+3
	STA FNUMBLK
	LDA #$FF
	STA FBLKMSK
	STA FBLKMSK+1
	STA FBLKMSK+2
	STA ?FRAMMOD

; check flash type, first 512k types
	LDA FTYPE
	CMP #TAMD40B
	BEQ ?DET512
	CMP #TST40B
	BEQ ?DET512
	CMP #TBM40
	BEQ ?DET512
	CMP #TAMIC40
	BEQ ?DET512
	CMP #TSST40
	BNE ?NDET512_4
	JMP ?DET512_4
?NDET512_4
	CMP #TRAM512
	BEQ ?RAM512

; and now 128k types
	CMP #TAMD10
	BEQ ?DET128
	CMP #TAMD10B
	BEQ ?DET128
	CMP #TST10B
	BEQ ?DET128
	CMP #TSST10A
	BNE ?NDET128_4
	JMP ?DET128_4
?NDET128_4
	CMP #TRAM128
	BEQ ?RAM128
	CMP #TRAM1024
	BEQ ?RAM1024

; 4MB
	CMP #TAMD32B
	BEQ ?DET4096

; no flash - just leave with dummy default values
	JMP ?SETREAD	; try to leave ID mode anyways

?RAM512
	INC ?FRAMMOD
?DET512	
	LDA #8		; flash size 512k
	STA FSIZE+2	

	LDA #1		; block size 64k
	STA FBLKSIZ+2

	LDA #8		; 8 blocks
	STA FNUMBLK

	LDA #0		; block mask is $00FFFF
	STA FBLKMSK+2

	RTS

?RAM128
	INC ?FRAMMOD
?DET128
	LDA #2		; flash size 128k
	STA FSIZE+2

	LDA #$40	; block size 16k
	STA FBLKSIZ+1

	LDA #8		; 8 blocks
	STA FNUMBLK

	LDA #$FF	; block mask is $003FFF
	STA FBLKMSK
	LDA #$3F
	STA FBLKMSK+1

	RTS

?RAM1024
	INC ?FRAMMOD
	LDA #$10
	STA FSIZE+2
	RTS

?DET4096
	LDA #64		; flash size 4096k
	STA FSIZE+2	

	LDA #1		; block size 64k
	STA FBLKSIZ+2

	LDA #64		; 64 blocks
	STA FNUMBLK

	LDA #0		; block mask is $00FFFF
	STA FBLKMSK+2
	RTS

; 512k with 4k sectors
?DET512_4
	LDA #8		; flash size 512k
	STA FSIZE+2	

	LDA #$10	; block size 4k
	STA FBLKSIZ+1

	LDA #128	; 128 blocks
	STA FNUMBLK

	LDA #0		; block mask is $000FFF
	STA FBLKMSK+2
	LDA #$0F
	STA FBLKMSK+1
	RTS

; 128k with 4k sectors
?DET128_4
	LDA #2		; flash size 512k
	STA FSIZE+2	

	LDA #$10	; block size 4k
	STA FBLKSIZ+1

	LDA #32	; 128 blocks
	STA FNUMBLK

	LDA #0		; block mask is $000FFF
	STA FBLKMSK+2
	LDA #$0F
	STA FBLKMSK+1
	RTS

; ID tables
; format: chip-type, manufacturer ID, device ID

?IDHI	.BYTE TAMD10, $01, $20	; AMD 29F010
	.BYTE TBM40, $AD, $40	; BM 29F040
	.BYTE TSST40, $BF, $B7	; SST 39SF040
	.BYTE TSST10A, $BF, $B5	; SST 39SF010A
	.BYTE TNOFLSH,$FF,$FF	; end of table

?IDLO	.BYTE TAMD10B, $01, $20	; AMD 29F010B
	.BYTE TAMD40B, $01, $A4	; AMD 29F040B
	.BYTE TAMD32B, $01, $41	; AMD 29F032B
	.BYTE TST10B, $20, $20	; ST 29F010B
	.BYTE TST40B, $20, $E2	; ST 29F040B
	.BYTE TAMIC40, $37, $86	; AMIC 29040B
	.BYTE TNOFLSH,$FF,$FF	; end of table

; flash type ($FF means no flash)
FTYPE	.BYTE 0

; flash size in bytes (4th byte unused)
FSIZE	.BYTE 0,0,0,0

; number of flash blocks (0 means no blocks)
FNUMBLK	.BYTE 0

; size of a flash block (4th byte unused)
FBLKSIZ	.BYTE 0,0,0,0

; mask to apply to an address to get the block starting address
; (4th byte unused)
FBLKMSK	.BYTE 0,0,0,0

; DQ7 polling algorithm
?WTDATA	AND #$80
	STA ?WTBYTE
?WTDLP	LDA (FLASHVEC),Y
	EOR ?WTBYTE
	BPL ?WTDOK
	AND #$20
	BEQ ?WTDLP
	LDA (FLASHVEC),Y
	EOR ?WTBYTE
	BPL ?WTDOK
	JSR ?SETREAD
	LDA #$FF
	RTS

?WTDOK	LDA #$00
	RTS

?WTBYTE	.BYTE 0

; write X bytes from DATAADR,Y to FLASHADR,Y
FWBYTE	JSR ?FSETUPB		; setup addresses for byte mode

?FWBYTL	JSR ?FSETADR

	BIT ?FRAMMOD
	BPL ?FWBYT1
	JSR ?SETPROG
?FWBYT1	
	LDX ?BANKNO
	SBANKX
	LDA (DATAVEC),Y
	STA (FLASHVEC),Y	; program data
	BIT ?FRAMMOD
	BPL ?FWBYT2
	JSR ?WTDATA		; wait for programming to finish
	BMI ?FBERR1		; error 1
	LDA (DATAVEC),Y		; verify data
?FWBYT2	CMP (FLASHVEC),Y
	BNE ?FBERR2		; error 2
	INC DATAVEC
	BNE ?FWBYT3
	INC DATAVEC+1
?FWBYT3	INC FLASHADI
	BNE ?FWBYT4
	INC FLASHADI+1
	BNE ?FWBYT4
	INC FLASHADI+2
?FWBYT4	DEC ?FBCOUNT		; next byte?
	BNE ?FWBYTL
	LDA #0
	RTS

?FBERR2 STA FERRUD
	LDA (FLASHVEC),Y
	STA FERRFD
	INC FERROR
?FBERR1	INC FERROR
?FBERR	LDA FERROR
	ORA #$80
	STA FERROR
	RTS

; write X pages from DATAADR to FLASHADR
FWPAGE	JSR ?FSETUPP		; setup adresses and check for page mode
	BMI ?FPERR

?FWPAG1	JSR ?FSETADR		; setup absolute flash address

?FWPAGL 
	BIT ?FRAMMOD
	BMI ?FWPAGL2

	LDX ?BANKNO
	SBANKX
?FWPAGL1
	LDA (DATAVEC),Y
	STA (FLASHVEC),Y
	CMP (FLASHVEC),Y
	BNE ?FPERR2
	INY
	BNE ?FWPAGL1
	BEQ ?FWPAG2

?FWPAGL2
	JSR ?SETPROG
	LDX ?BANKNO
	SBANKX
	LDA (DATAVEC),Y
	STA (FLASHVEC),Y	; program data
	JSR ?WTDATA		; wait for programming to finish
	BMI ?FPERR1		; error
	LDA (DATAVEC),Y
	CMP (FLASHVEC),Y		; verify data
	BNE ?FPERR2
	INY
	BNE ?FWPAGL2

?FWPAG2	INC DATAVEC+1
	INC FLASHADI+1
	BNE ?FWPAG3
	INC FLASHADI+2
?FWPAG3	DEC ?FPCOUNT
	BNE ?FWPAG1
	LDA #0
	RTS

; error in page mode: add Y to current address and return
?FPERR2	STA FERRUD
	LDA (FLASHVEC),Y
	STA FERRFD
	INC FERROR
?FPERR1	INC FERROR

?FPERR	TYA			; calculate address of error byte
	CLC
	ADC FLASHADI
	STA FLASHADI
	BCC ?FPERR3
	INC FLASHADI+1
	BCC ?FPERR3
	INC FLASHADI+2
?FPERR3	LDA FERROR
	ORA #$80
	STA FERROR
	RTS


; copy X bytes from FLASHADR,Y to DATAADR,Y
FRBYTE	JSR ?FSETUPB		; setup addresses for byte mode

?FRBYTL	JSR ?FSETADR
	LDX ?BANKNO
	SBANKX
	LDA (FLASHVEC),Y
	STA (DATAVEC),Y
	INC DATAVEC
	BNE ?FRBYT1
	INC DATAVEC+1
?FRBYT1	INC FLASHADI
	BNE ?FRBYT2
	INC FLASHADI+1
	BNE ?FRBYT2
	INC FLASHADI+2
?FRBYT2	DEC ?FBCOUNT
	BNE ?FRBYTL
	LDA #0
	RTS

; copy X pages from FLASHADR to DATAADR
FRPAGE	JSR ?FSETUPP
	BPL ?FRPAG1
	JMP ?FPERR

?FRPAG1	JSR ?FSETADR
	LDX ?BANKNO
	SBANKX

?FRPAGL	LDA (FLASHVEC),Y
	STA (DATAVEC),Y
	INY
	BNE ?FRPAGL

	INC DATAVEC+1
	INC FLASHADI+1
	BNE ?FRPAG2
	INC FLASHADI+2
?FRPAG2 DEC ?FPCOUNT
	BNE ?FRPAG1
	LDA #0
	RTS

; compare X bytes from FLASHADR,Y to DATAADR,Y
FCBYTE	JSR ?FSETUPB		; setup addresses for byte mode
	
?FCBYT1	JSR ?FSETADR
	LDX ?BANKNO
	SBANKX

	LDA (FLASHVEC),Y
	CMP (DATAVEC),Y
	BNE ?FCBYT4		; bytes differ
	INC DATAVEC
	BNE ?FCBYT2
	INC DATAVEC+1
?FCBYT2
	INC FLASHADI
	BNE ?FCBYT3
	INC FLASHADI+1
	BNE ?FCBYT3
	INC FLASHADI+2
?FCBYT3 DEC ?FBCOUNT
	BNE ?FCBYT1
	LDA #0
	RTS
?FCBYT4	JMP ?FBERR2

; compare X pages from FLASHADR to DATAADR
FCPAGE	JSR ?FSETUPP		; setup adresses and check for page start
	BPL ?FCPAG1
	JMP ?FPERR

?FCPAG1	JSR ?FSETADR
	LDX ?BANKNO
	SBANKX

?FCPAGL	LDA (FLASHVEC),Y
	CMP (DATAVEC),Y
	BNE ?FCPAG3
	INY
	BNE ?FCPAGL
	INC DATAVEC+1
	INC FLASHADI+1
	BNE ?FCPAG2
	INC FLASHADI+2
?FCPAG2	DEC ?FPCOUNT
	BNE ?FCPAG1
	LDA #0
	RTS
?FCPAG3	JMP ?FPERR2

; completely erase flash chip
FCERAS	JSR ?FSETUPA		; setup addresses

	BIT ?FRAMMOD
	BMI ?FCERA1

?FCERA0	LDA #EFLUNS		; erasing RAM not supported
	STA FERROR
	RTS

?FCERA1	JSR ?SETCERA
?FCERA2	LDA #$FF
	LDY #0
	STY FERROR
	JSR ?WTDATA
	BPL ?FCERA3
	LDA #EFLFTO
	STA FERROR
?FCERA3	LDA FERROR
	RTS

; erase flash bank
FPERAS	JSR ?FSETUPA		; setup addresses
	BIT ?FRAMMOD
	BPL ?FCERA0		; erasing RAM not supported
	JSR ?SETBERA
	JMP ?FCERA2

; check for presence of flash(cart)
FPRESENT
	JSR ?FSETUPA
	JSR FDISABLE
	LDA BANKBAS		; save RAM content
	STA FLASHTMP
	JSR FENABLE
	JSR ?XRBASE
	LDA BANKBAS		; read flash content
	EOR #$FF		; invert it
	PHA
	PHA
	JSR FDISABLE
	PLA
	STA BANKBAS		; store inverted flash in RAM
	JSR FENABLE
	JSR ?XRBASE
	PLA
	CMP BANKBAS		; compare with flash
	PHP
	JSR FDISABLE
	LDA FLASHTMP		; restore RAM content
	STA BANKBAS
	PLP
	BEQ ?FPRES1		; values are equal - only RAM present
	LDA #0			; values different - flash
	RTS
?FPRES1	LDA #$FF
	RTS

